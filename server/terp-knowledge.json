{
  "bible": {
    "full_text": "# TERP Development Protocols\n\n**Version:** 2.1  \n**Last Updated:** October 27, 2025  \n**Purpose:** Ensure systematic integration, production-ready code, and maintainable architecture throughout TERP development\n\n---\n\n## Table of Contents\n\n1. [System Integration & Change Management Protocol](#system-integration--change-management-protocol)\n2. [Production-Ready Code Standard](#production-ready-code-standard)\n3. [Breaking Change Protocol](#breaking-change-protocol)\n4. [Quality Standards Checklist](#quality-standards-checklist)\n5. [Deployment Monitoring Protocol](#deployment-monitoring-protocol)\n6. [Version Management Protocol](#version-management-protocol)\n7. [Reference Documentation](#reference-documentation)\n\n---\n\n## System Integration & Change Management Protocol\n\n### 1. IMPACT ANALYSIS (Before Making Changes)\n\nBefore implementing any change, perform a comprehensive impact analysis:\n\n- **Identify affected files:** List all components, pages, utilities, and configuration files that will be modified\n- **Map dependencies:** \n  - What components import this file?\n  - What does this file import?\n  - What data structures flow through this component?\n  - What routes or navigation paths reference this?\n- **Check for ripple effects:**\n  - Will this change break navigation or routing?\n  - Will this affect data structures or type definitions?\n  - Will this impact UI consistency or design system patterns?\n  - Will this require updates to mock data or API calls?\n- **Create update checklist:** List ALL files that need updates to maintain system coherence\n\n### 2. INTEGRATION VERIFICATION (During Changes)\n\nWhen implementing changes, maintain system-wide coherence:\n\n- **Batch related updates:** Update ALL related files in a single operation, not piecemeal\n- **Maintain consistency across:**\n  - Component props and interfaces\n  - TypeScript type definitions\n  - Routing paths and navigation links\n  - Data schemas and mock data structures\n  - Styling patterns (colors, spacing, typography)\n  - Component variants and design tokens\n- **Verify imports/exports:** Ensure all imports remain valid after renaming or restructuring\n- **Preserve design system:** Keep consistent use of shadcn/ui components and Tailwind utilities\n- **Update documentation:** Reflect changes in comments, README files, and type documentation\n\n### 3. SYSTEM-WIDE VALIDATION (After Changes)\n\nAfter implementing changes, validate the entire system:\n\n- **Run `webdev_check_status`:** Verify TypeScript errors are resolved and no build errors exist\n- **Test navigation flows:** \n  - Click through all navigation links\n  - Verify no broken routes or 404 errors\n  - Test back/forward browser navigation\n- **Verify data flows:**\n  - Check that mock data renders correctly\n  - Ensure data transformations work as expected\n  - Validate that all UI components receive correct props\n- **Visual regression check:**\n  - Verify all pages still render correctly\n  - Check responsive behavior at different screen sizes\n  - Ensure no layout breaks or styling regressions\n- **Browser testing:** Test in the actual browser, not just TypeScript compilation\n\n### 4. BREAKING CHANGE PROTOCOL\n\nIf a requested change requires any of the following, **STOP and report to the user FIRST:**\n\n**Triggers for Breaking Change Protocol:**\n- Refactoring more than 5 files\n- Changing core data structures, schemas, or type definitions\n- Restructuring routing or navigation architecture\n- Rebuilding major UI components or layouts\n- Migrating to different libraries or frameworks\n- Changing state management patterns\n- Modifying API contracts or data fetching logic\n- Altering authentication or authorization flows\n\n**Required Report Format:**\n\n```\n\ud83d\udea8 BREAKING CHANGE ALERT\n\nSCOPE:\n- X files affected\n- Y components require refactoring\n- Z routes need restructuring\n\nREASON:\n[Explain why this change requires major refactoring]\n\nAFFECTED SYSTEMS:\n- [List all major systems/features affected]\n\nRISKS:\n- [Potential breaking changes]\n- [Data migration concerns]\n- [Backward compatibility issues]\n\nALTERNATIVES:\n- [Option 1: Description]\n- [Option 2: Description]\n\nRECOMMENDATION:\n[Your recommended approach]\n\n\u23f8\ufe0f AWAITING USER CONFIRMATION TO PROCEED\n```\n\n**Wait for explicit user confirmation before proceeding with breaking changes.**\n\n### 5. CHECKPOINT DISCIPLINE\n\nMaintain proper version control and recovery points:\n\n- **Before major refactoring:** Always save a checkpoint before attempting significant architectural changes\n- **After successful features:** Save checkpoints after successfully integrating new features or completing milestones\n- **Never deliver broken states:** Do not save checkpoints or deliver to users when the system has known errors\n- **Meaningful descriptions:** Write clear, descriptive checkpoint messages that explain what was accomplished\n\n---\n\n## Production-Ready Code Standard\n\n### Absolute Requirements\n\n**NO PLACEHOLDERS OR STUBS**\n\n\u274c **NEVER use:**\n- \"TODO\", \"FIXME\", \"Coming Soon\", \"Placeholder\"\n- \"To be implemented\", \"Not yet working\"\n- Pseudo-code or commented-out logic\n- Empty function bodies with comments\n- Mock data labeled as \"temporary\" without full implementation\n- Disabled features with \"enable later\" comments\n\n\u2705 **ALWAYS implement:**\n- Complete, functional, production-ready code\n- Real interactions for every UI element\n- Proper error handling and loading states\n- Full validation logic for all forms\n- Complete data flows from source to UI\n- Graceful degradation for edge cases\n\n### Full Implementation Mandate\n\nEvery deliverable must meet these standards:\n\n1. **Components:**\n   - Fully functional with all props properly typed\n   - Complete interaction logic (clicks, hovers, focus states)\n   - Proper accessibility attributes (ARIA labels, keyboard navigation)\n   - Loading and error states handled\n   - Responsive design implemented\n\n2. **Features:**\n   - Work end-to-end from user action to result\n   - Include proper validation and error messages\n   - Handle edge cases gracefully\n   - Provide user feedback for all actions\n\n3. **Data Flows:**\n   - Complete from source to UI rendering\n   - Use realistic, comprehensive mock data if backend unavailable\n   - Include proper type definitions\n   - Handle loading, success, and error states\n\n4. **Forms:**\n   - Full validation logic (client-side)\n   - Clear error messages\n   - Submission handling with feedback\n   - Proper disabled/loading states during submission\n\n5. **Error Handling:**\n   - Try-catch blocks where appropriate\n   - User-friendly error messages\n   - Fallback UI for error states\n   - Console logging for debugging (can be removed in production)\n\n### Exception Protocol - If Stubs Are Unavoidable\n\nIf technical constraints genuinely require creating incomplete implementation:\n\n**STOP and explicitly report:**\n\n```\n\ud83d\udea8 INCOMPLETE IMPLEMENTATION ALERT\n\nINCOMPLETE FEATURE: [Name]\n\nWHAT IS INCOMPLETE:\n- [Specific functionality missing]\n\nWHY IT'S INCOMPLETE:\n- [Technical constraint or blocker]\n\nMISSING FUNCTIONALITY:\n- [Detailed list of what's not implemented]\n\nCOMPLETION REQUIREMENTS:\n- [What would be needed to complete it]\n\nCOMPLETION PLAN:\n- [When/how it will be completed]\n\n\u23f8\ufe0f AWAITING USER ACKNOWLEDGMENT\n```\n\n**Wait for user acknowledgment before proceeding.**\n\n### Task Completion Reporting\n\nWhen reporting task completion, MUST include:\n\n\u2705 **Production Ready Confirmation:**\n- \"All features are production-ready and fully functional\"\n- \"No placeholders, stubs, or incomplete implementations\"\n\n\u2705 **Known Limitations:**\n- List any intentional simplifications (e.g., \"Using mock data instead of API\")\n- Explain any features intentionally scoped out\n\n\u2705 **Incomplete Work Alerts:**\n- Flag ANY incomplete work with \ud83d\udea8 alerts\n- Provide clear reasoning and completion plan\n\n\u2705 **Status Declaration:**\n- \"STATUS: PRODUCTION READY\" or\n- \"STATUS: INCOMPLETE - [specific reason]\"\n\n---\n\n## Quality Standards Checklist\n\n### Code Quality\n\n- [ ] **Clean Code:**\n  - Meaningful variable and function names\n  - Proper code organization and structure\n  - No commented-out code blocks\n  - Consistent formatting and style\n\n- [ ] **Type Safety:**\n  - All TypeScript types properly defined\n  - No `any` types unless absolutely necessary\n  - Proper interface definitions for props\n  - Type guards where needed\n\n- [ ] **Maintainability:**\n  - DRY principle (Don't Repeat Yourself)\n  - Single Responsibility Principle\n  - Proper separation of concerns\n  - Reusable components and utilities\n\n### UI/UX Quality\n\n- [ ] **Visual Polish:**\n  - Proper spacing and alignment\n  - Consistent colors from design system\n  - Smooth transitions and animations\n  - Professional typography\n\n- [ ] **Interactions:**\n  - Hover states for interactive elements\n  - Focus states for keyboard navigation\n  - Active/pressed states for buttons\n  - Loading indicators for async operations\n  - Disabled states where appropriate\n\n- [ ] **Responsive Design:**\n  - Works on mobile (320px+)\n  - Works on tablet (768px+)\n  - Works on desktop (1024px+)\n  - Proper breakpoints used\n  - No horizontal scrolling\n\n- [ ] **Accessibility:**\n  - Semantic HTML elements\n  - ARIA labels where needed\n  - Keyboard navigation support\n  - Sufficient color contrast\n  - Screen reader compatibility\n\n### Functionality\n\n- [ ] **Error Handling:**\n  - Try-catch for async operations\n  - User-friendly error messages\n  - Fallback UI for errors\n  - Network error handling\n\n- [ ] **Loading States:**\n  - Skeleton loaders or spinners\n  - Disabled states during loading\n  - Progress indicators for long operations\n\n- [ ] **Data Validation:**\n  - Form validation with clear messages\n  - Input sanitization\n  - Type checking for data structures\n  - Edge case handling\n\n- [ ] **Performance:**\n  - No unnecessary re-renders\n  - Proper use of React hooks\n  - Lazy loading where appropriate\n  - Optimized images and assets\n\n---\n\n## Reference Documentation\n\n### Core Documents\n\nThe following documents contain comprehensive research and guidelines for TERP development:\n\n1. **TERP_DESIGN_SYSTEM.md**\n   - Comprehensive UX/UI research synthesis\n   - Design principles and patterns\n   - Component library guidelines\n   - Color, typography, and spacing systems\n   - Accessibility standards\n   - Interaction patterns\n\n2. **TERP_IMPLEMENTATION_STRATEGY.md**\n   - Phased development roadmap\n   - Technology stack decisions\n   - Architecture patterns\n   - Module-by-module implementation plan\n   - Testing and validation strategies\n\n### Research Foundation\n\nThe TERP design system is based on comprehensive research across 12 key UX/UI topics:\n\n1. **Information Architecture & Navigation**\n   - Persistent sidebar for internal tools\n   - Clear visual hierarchy\n   - Breadcrumb navigation for deep structures\n\n2. **Data Tables & Grids**\n   - Advanced filtering and sorting\n   - Inline editing capabilities\n   - Bulk actions support\n   - Column customization\n\n3. **Forms & Input Validation**\n   - Real-time validation\n   - Clear error messaging\n   - Progressive disclosure\n   - Smart defaults\n\n4. **Dashboard Design**\n   - Customizable widgets\n   - Key metrics at-a-glance\n   - Drill-down capabilities\n   - Responsive layouts\n\n5. **Search & Filtering**\n   - Global search functionality\n   - Advanced filters\n   - Saved searches\n   - Search suggestions\n\n6. **Responsive Design**\n   - Mobile-first approach\n   - Adaptive layouts\n   - Touch-friendly interactions\n   - Progressive enhancement\n\n7. **Accessibility (WCAG 2.1)**\n   - Keyboard navigation\n   - Screen reader support\n   - Color contrast compliance\n   - Focus management\n\n8. **Performance Optimization**\n   - Code splitting\n   - Lazy loading\n   - Optimized rendering\n   - Asset optimization\n\n9. **Error Handling & Feedback**\n   - Contextual error messages\n   - Toast notifications\n   - Inline validation\n   - Recovery suggestions\n\n10. **Workflow & Task Management**\n    - Status tracking\n    - Action queues\n    - Progress indicators\n    - Batch operations\n\n11. **Color Theory & Visual Hierarchy**\n    - Consistent color palette\n    - Semantic colors for status\n    - Visual weight and emphasis\n    - White space utilization\n\n12. **Typography & Readability**\n    - Clear font hierarchy\n    - Optimal line length\n    - Proper contrast\n    - Responsive typography\n\n### Design Principles\n\n**Core Principles Applied Throughout TERP:**\n\n1. **Clarity Over Cleverness**\n   - Prioritize user understanding over novel interactions\n   - Use familiar patterns and conventions\n   - Provide clear labels and instructions\n\n2. **Progressive Disclosure**\n   - Show essential information first\n   - Reveal complexity as needed\n   - Avoid overwhelming users\n\n3. **Consistency**\n   - Maintain design patterns across modules\n   - Use consistent terminology\n   - Apply uniform interaction models\n\n4. **Feedback & Responsiveness**\n   - Acknowledge all user actions\n   - Provide clear status indicators\n   - Show progress for long operations\n\n5. **Error Prevention & Recovery**\n   - Validate input in real-time\n   - Provide helpful error messages\n   - Offer clear recovery paths\n\n6. **Efficiency for Experts**\n   - Keyboard shortcuts for power users\n   - Bulk actions for repetitive tasks\n   - Customizable workflows\n\n7. **Accessibility First**\n   - Design for all users from the start\n   - Test with assistive technologies\n   - Exceed minimum compliance standards\n\n---\n\n## Usage Guidelines\n\n### For Developers\n\n1. **Before Starting Work:**\n   - Review this document\n   - Check TERP_DESIGN_SYSTEM.md for design patterns\n   - Review TERP_IMPLEMENTATION_STRATEGY.md for architecture\n\n2. **During Development:**\n   - Follow the System Integration Protocol\n   - Maintain Production-Ready Code Standard\n   - Use the Quality Standards Checklist\n\n3. **Before Completion:**\n   - Run full system validation\n   - Complete the Quality Standards Checklist\n   - Prepare proper completion report\n\n### For AI Assistants\n\nWhen working on TERP in future sessions:\n\n1. **Session Start:**\n   - Read this document first\n   - Review existing implementation\n   - Understand current architecture\n\n2. **Change Requests:**\n   - Perform Impact Analysis\n   - Follow Integration Verification steps\n   - Apply Breaking Change Protocol when needed\n\n3. **Delivery:**\n   - Ensure Production-Ready standards\n   - Complete System-Wide Validation\n   - Provide comprehensive completion report\n\n---\n\n## Deployment Monitoring Protocol\n\n### ALWAYS Monitor Deployments After Push\n\nWhenever code is pushed to GitHub, **immediately monitor the deployment** to catch issues early.\n\n#### Required Actions After Every `git push`:\n\n1. **Wait for Build** (2-3 minutes)\n   - Don't assume success\n   - Actively wait and monitor\n\n2. **Check Deployment Status**\n   - Render: Check deployment logs in dashboard or via API\n   - Railway: Check deployment status and logs\n   - Vercel: Check deployment status\n\n3. **Verify Application Health**\n   - Load the production URL\n   - Check for 502/500 errors\n   - Verify critical pages load\n   - Check browser console for errors\n\n4. **Review Deployment Logs**\n   - Look for ERROR messages\n   - Check migration success\n   - Verify environment variables loaded\n   - Confirm server started successfully\n\n5. **Take Immediate Action on Failures**\n   - Don't wait for user to report issues\n   - Debug and fix immediately\n   - Roll back if necessary\n\n#### Deployment Credentials\n\nStored in: `/docs/DEPLOYMENT_CREDENTIALS.md` (DO NOT COMMIT TO PUBLIC REPOS)\n\n- **Render API Key:** For autonomous deployment monitoring\n- **Railway Token:** For CLI access and monitoring\n\n#### Autonomous Monitoring Commands\n\n**Render:**\n```bash\n# Check service status\ncurl -H \"Authorization: Bearer $RENDER_API_KEY\" \\\n  https://api.render.com/v1/services\n\n# Get deployment logs\ncurl -H \"Authorization: Bearer $RENDER_API_KEY\" \\\n  https://api.render.com/v1/services/{serviceId}/deploys\n```\n\n**Railway:**\n```bash\nexport RAILWAY_TOKEN=your_token\nrailway status\nrailway logs\n```\n\n### Why This Matters\n\n- **Catch issues immediately** before they affect users\n- **Faster debugging** with fresh context\n- **Production reliability** through proactive monitoring\n- **Autonomous operation** reduces manual intervention\n\n**Remember:** A successful `git push` doesn't mean successful deployment. Always verify!\n\n---\n\n## Version Management Protocol\n\n### MANDATORY: Update Version on Every GitHub Push\n\nTo ensure version traceability and deployment verification, **every single GitHub push MUST include a version update**.\n\n#### Version File Location\n\n`/version.json` in the project root:\n\n```json\n{\n  \"version\": \"1.0.0\",\n  \"commit\": \"abc1234\",\n  \"date\": \"2025-10-27\",\n  \"description\": \"Brief description of changes\"\n}\n```\n\n#### Required Actions Before Every `git push`:\n\n1. **Update Commit Hash**\n   ```bash\n   # Get current commit hash (short form)\n   git rev-parse --short HEAD\n   ```\n   - Update `commit` field in `version.json` with the current commit hash\n\n2. **Update Date**\n   - Set `date` field to current date in YYYY-MM-DD format\n\n3. **Update Description**\n   - Briefly describe what changed in this push\n   - Examples: \"Added version display\", \"Fixed login bug\", \"Updated accounting module\"\n\n4. **Increment Version (if applicable)**\n   - For major features: increment minor version (1.0.0 \u2192 1.1.0)\n   - For bug fixes: increment patch version (1.0.0 \u2192 1.0.1)\n   - For breaking changes: increment major version (1.0.0 \u2192 2.0.0)\n\n#### Version Display Implementation\n\nThe version is displayed persistently in the application header:\n\n- **Desktop:** Shows both version number and commit hash\n- **Mobile:** Shows commit hash only (space-constrained)\n- **Location:** `client/src/components/layout/AppHeader.tsx`\n- **Import:** `import versionInfo from '../../../version.json'`\n\n#### Why This Matters\n\n- **Deployment Verification:** User can verify they're working with the correct deployed version\n- **Debugging:** Quickly identify which code version is running in production\n- **Traceability:** Link production issues to specific commits\n- **Accountability:** Clear history of what changed and when\n\n#### Enforcement\n\n**This is a MANDATORY protocol. Every Manus agent MUST:**\n\n1. Check `version.json` before pushing to GitHub\n2. Update the commit hash to match the current HEAD\n3. Update the date to current date\n4. Update the description with a brief summary of changes\n5. Only then proceed with `git push`\n\n**Failure to update version.json is a protocol violation.**\n\n---\n\n## 13. Future Architecture Compatibility Protocol\n\n### Context\n\nTERP is evolving toward a **secure home office architecture** with:\n- Air-gapped core server\n- VPN-only access (WireGuard)\n- Multi-factor authentication (VPN + device certificate + biometric)\n- Offline-first Progressive Web App (PWA)\n- Redis caching layer\n- Comprehensive monitoring (Prometheus + Grafana)\n\nThis evolution is planned for **8 weeks / 160 hours** of implementation work.\n\n### The Challenge\n\nHow do we continue current development without creating work that will need to be undone or redone when implementing this vision?\n\n### The Solution\n\nAll development work MUST be **forward-compatible** with the future architecture by following these protocols.\n\n---\n\n### 13.1 Authentication Abstraction\n\n**Rule:** Use `authProvider` interface, never call authentication provider (Clerk) directly.\n\n**Why:** When we add MFA (multi-factor authentication), we can replace the implementation without changing any calling code.\n\n**Implementation:**\n\n```typescript\n// \u2705 GOOD - Uses abstraction\nimport { authProvider } from '../_core/authProvider';\nconst user = await authProvider.requireAuth(req);\n\n// \u274c BAD - Direct Clerk call (will need refactoring)\nimport { getAuth } from '@clerk/express';\nconst { userId } = getAuth(req);\n```\n\n**Files:**\n- `server/_core/authProvider.ts` - Authentication abstraction interface\n- All routers MUST use this interface\n\n**Verification:**\n- [ ] No direct Clerk imports in new code\n- [ ] All authentication uses `authProvider` interface\n\n---\n\n### 13.2 Data Access Abstraction\n\n**Rule:** Use `dataProvider` interface, never call `getDb()` directly.\n\n**Why:** When we add Redis caching and offline sync, we can intercept all data access without changing business logic.\n\n**Implementation:**\n\n```typescript\n// \u2705 GOOD - Uses abstraction\nimport { dataProvider } from '../_core/dataProvider';\nconst orders = await dataProvider.query(db => \n  db.select().from(orders).where(eq(orders.orgId, orgId))\n);\n\n// \u274c BAD - Direct database call (will need refactoring)\nimport { getDb } from '../db';\nconst db = await getDb();\nconst orders = await db.select().from(orders);\n```\n\n**Files:**\n- `server/_core/dataProvider.ts` - Data access abstraction interface\n- All `*Db.ts` files MUST use this interface\n\n**Verification:**\n- [ ] No direct `getDb()` calls in new code\n- [ ] All data access uses `dataProvider` interface\n\n---\n\n### 13.3 Offline-First API Design\n\n**Rule:** All mutation endpoints MUST return full objects, timestamps, and affected records.\n\n**Why:** Enables optimistic UI updates, conflict resolution, and cache invalidation for offline-first PWA.\n\n**Implementation:**\n\n```typescript\n// \u2705 GOOD - Offline-friendly response\nexport const ordersRouter = router({\n  create: protectedProcedure\n    .input(createOrderSchema)\n    .mutation(async ({ input, ctx }) => {\n      const order = await ordersDb.createOrder(input, ctx.user.organizationId);\n      return {\n        order,  // Full object for optimistic update\n        affectedRecords: {  // For cache invalidation\n          orders: [order.id],\n          inventory: order.items.map(i => i.inventoryId),\n        },\n        timestamp: new Date(),  // For conflict resolution\n      };\n    }),\n});\n\n// \u274c BAD - Not offline-friendly (requires another query)\nexport const ordersRouter = router({\n  create: protectedProcedure\n    .input(createOrderSchema)\n    .mutation(async ({ input, ctx }) => {\n      const orderId = await ordersDb.createOrder(input);\n      return { orderId };  // Client needs to fetch full object!\n    }),\n});\n```\n\n**Required Response Fields:**\n- `[resource]`: Full object that was created/updated\n- `affectedRecords`: Object mapping resource types to affected IDs\n- `timestamp`: ISO timestamp for conflict resolution\n\n**Verification:**\n- [ ] Mutation returns full object (not just ID)\n- [ ] Response includes `affectedRecords`\n- [ ] Response includes `timestamp`\n\n---\n\n### 13.4 Schema Evolution\n\n**Rule:** All schema changes MUST be additive, never breaking.\n\n**Why:** Enables zero-downtime deployments and backward compatibility during the 8-week transition.\n\n**Implementation:**\n\n```typescript\n// \u2705 GOOD - Additive change (backward compatible)\nexport const users = mysqlTable('users', {\n  id: serial('id').primaryKey(),\n  email: varchar('email', { length: 255 }).notNull(),\n  // ... existing fields ...\n  \n  // NEW: Nullable for backward compatibility\n  mfaEnabled: boolean('mfa_enabled').default(false),\n  deviceCertificateRequired: boolean('device_certificate_required').default(false),\n});\n\n// \u274c BAD - Breaking change (renames field)\nexport const users = mysqlTable('users', {\n  id: serial('id').primaryKey(),\n  emailAddress: varchar('email_address', { length: 255 }),  // RENAMED - BREAKS CODE!\n});\n```\n\n**Rules:**\n- **NEVER** rename existing columns (add new ones instead)\n- **NEVER** delete existing tables (mark as deprecated instead)\n- **ALWAYS** make new fields nullable or provide defaults\n- **ALWAYS** use migrations for schema changes\n\n**Verification:**\n- [ ] No renamed columns\n- [ ] No deleted tables\n- [ ] New fields are nullable or have defaults\n- [ ] Migration file created\n\n---\n\n### 13.5 Code Organization\n\n**Rule:** Routers THIN (< 50 lines per procedure), Business logic in `*Db.ts` files.\n\n**Why:** Keeps authentication, validation, and business logic separated for easier refactoring.\n\n**File Structure:**\n\n```\nserver/\n\u251c\u2500\u2500 _core/                    # Core infrastructure (abstraction layer)\n\u2502   \u251c\u2500\u2500 authProvider.ts       # Authentication abstraction\n\u2502   \u251c\u2500\u2500 dataProvider.ts       # Data access abstraction\n\u2502   \u251c\u2500\u2500 errors.ts             # Error handling\n\u2502   \u251c\u2500\u2500 logger.ts             # Logging\n\u2502   \u2514\u2500\u2500 monitoring.ts         # Monitoring\n\u251c\u2500\u2500 auth/                     # Authentication logic (FUTURE: MFA goes here)\n\u2502   \u2514\u2500\u2500 (reserved for future)\n\u251c\u2500\u2500 routers/                  # API endpoints (THIN - just validation & delegation)\n\u2502   \u251c\u2500\u2500 orders.ts\n\u2502   \u251c\u2500\u2500 inventory.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 *Db.ts                    # Business logic (THICK - all logic here)\n\u2502   \u251c\u2500\u2500 ordersDb.ts\n\u2502   \u251c\u2500\u2500 inventoryDb.ts\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 utils/                    # Shared utilities\n```\n\n**Router Pattern (THIN):**\n\n```typescript\n// \u2705 GOOD - Thin router (< 50 lines per procedure)\nexport const ordersRouter = router({\n  create: protectedProcedure\n    .input(createOrderSchema)\n    .mutation(async ({ input, ctx }) => {\n      return await ordersDb.createOrder(input, ctx.user.organizationId);\n    }),\n});\n\n// \u274c BAD - Fat router with business logic\nexport const ordersRouter = router({\n  create: protectedProcedure\n    .input(createOrderSchema)\n    .mutation(async ({ input, ctx }) => {\n      // 100+ lines of business logic here - BAD!\n      const db = await getDb();\n      const order = await db.transaction(async (tx) => {\n        // Complex business logic...\n      });\n      return order;\n    }),\n});\n```\n\n**Business Logic Pattern (THICK):**\n\n```typescript\n// \u2705 GOOD - Business logic in ordersDb.ts\nexport async function createOrder(input: CreateOrderInput, orgId: number) {\n  return await dataProvider.transaction(async (tx) => {\n    // All business logic here\n    // Validation, calculations, database operations\n    // Can be 100+ lines - that's fine!\n  });\n}\n```\n\n**Verification:**\n- [ ] Router procedures < 50 lines\n- [ ] Business logic in `*Db.ts` files\n- [ ] No database queries in routers\n\n---\n\n### 13.6 Pre-Push Compatibility Checklist\n\n**MANDATORY:** Before every `git push`, verify:\n\n**Authentication:**\n- [ ] Uses `authProvider` interface (not Clerk directly)\n- [ ] No direct authentication provider imports in new code\n\n**Data Access:**\n- [ ] Uses `dataProvider` interface (not `getDb()` directly)\n- [ ] No direct database access in new code\n\n**API Design:**\n- [ ] Mutations return full objects (not just IDs)\n- [ ] Responses include `affectedRecords`\n- [ ] Responses include `timestamp`\n\n**Schema:**\n- [ ] Schema changes are additive only\n- [ ] No renamed columns or deleted tables\n- [ ] New fields are nullable or have defaults\n- [ ] Migration file created\n\n**Code Organization:**\n- [ ] Router procedures < 50 lines\n- [ ] Business logic in `*Db.ts` files\n- [ ] No business logic in routers\n\n**Failure to meet these criteria is a protocol violation.**\n\n---\n\n### 13.7 Reference Documents\n\n**For Detailed Guidance:**\n- `docs/PRODUCT_DEVELOPMENT_STRATEGY.md` - Full 8-week implementation strategy\n- `docs/MANUS_AGENT_CONTEXT.md` - Quick reference for AI agents\n- `docs/TERP_Codebase_Implementation_Specification.md` - Complete future architecture spec\n\n**For Quick Reference:**\n- See `docs/MANUS_AGENT_CONTEXT.md` for code examples and patterns\n\n---\n\n## Version History\n\n**v3.0 - October 27, 2025**\n- Added Future Architecture Compatibility Protocol (Section 13)\n- Documented authentication abstraction requirements\n- Documented data access abstraction requirements\n- Documented offline-first API design patterns\n- Documented schema evolution rules\n- Added pre-push compatibility checklist\n- Created reference to PRODUCT_DEVELOPMENT_STRATEGY.md\n- Created reference to MANUS_AGENT_CONTEXT.md\n\n**v2.1 - October 27, 2025**\n- Added Version Management Protocol (MANDATORY)\n- Implemented persistent version display in header\n- Added version.json for version tracking\n- Updated tsconfig.json to support JSON imports\n\n**v2.0 - October 24, 2025**\n- Added complete accounting module documentation\n- Updated with mobile optimization patterns\n- Added 60+ accounting API endpoints\n- Documented 10 accounting pages and 6 UI components\n- Comprehensive database schema (17 tables total)\n\n**v1.0 - October 23, 2025**\n- Initial protocol documentation\n- Integrated comprehensive UX/UI research\n- Established change management procedures\n- Defined production-ready standards\n- Created quality checklists\n\n---\n\n## Contact & Feedback\n\nFor questions, clarifications, or protocol updates, consult the project maintainer or update this document with team consensus.\n\n**Remember:** These protocols exist to maintain quality, consistency, and system integrity. They are not bureaucratic overhead\u2014they are essential guardrails for sustainable development.\n\n",
    "sections": {
      "Table of Contents": "\n1. [System Integration & Change Management Protocol](#system-integration--change-management-protocol)\n2. [Production-Ready Code Standard](#production-ready-code-standard)\n3. [Breaking Change Protocol](#breaking-change-protocol)\n4. [Quality Standards Checklist](#quality-standards-checklist)\n5. [Deployment Monitoring Protocol](#deployment-monitoring-protocol)\n6. [Version Management Protocol](#version-management-protocol)\n7. [Reference Documentation](#reference-documentation)\n\n---\n",
      "System Integration & Change Management Protocol": "\n### 1. IMPACT ANALYSIS (Before Making Changes)\n\nBefore implementing any change, perform a comprehensive impact analysis:\n\n- **Identify affected files:** List all components, pages, utilities, and configuration files that will be modified\n- **Map dependencies:** \n  - What components import this file?\n  - What does this file import?\n  - What data structures flow through this component?\n  - What routes or navigation paths reference this?\n- **Check for ripple effects:**\n  - Will this change break navigation or routing?\n  - Will this affect data structures or type definitions?\n  - Will this impact UI consistency or design system patterns?\n  - Will this require updates to mock data or API calls?\n- **Create update checklist:** List ALL files that need updates to maintain system coherence\n\n### 2. INTEGRATION VERIFICATION (During Changes)\n\nWhen implementing changes, maintain system-wide coherence:\n\n- **Batch related updates:** Update ALL related files in a single operation, not piecemeal\n- **Maintain consistency across:**\n  - Component props and interfaces\n  - TypeScript type definitions\n  - Routing paths and navigation links\n  - Data schemas and mock data structures\n  - Styling patterns (colors, spacing, typography)\n  - Component variants and design tokens\n- **Verify imports/exports:** Ensure all imports remain valid after renaming or restructuring\n- **Preserve design system:** Keep consistent use of shadcn/ui components and Tailwind utilities\n- **Update documentation:** Reflect changes in comments, README files, and type documentation\n\n### 3. SYSTEM-WIDE VALIDATION (After Changes)\n\nAfter implementing changes, validate the entire system:\n\n- **Run `webdev_check_status`:** Verify TypeScript errors are resolved and no build errors exist\n- **Test navigation flows:** \n  - Click through all navigation links\n  - Verify no broken routes or 404 errors\n  - Test back/forward browser navigation\n- **Verify data flows:**\n  - Check that mock data renders correctly\n  - Ensure data transformations work as expected\n  - Validate that all UI components receive correct props\n- **Visual regression check:**\n  - Verify all pages still render correctly\n  - Check responsive behavior at different screen sizes\n  - Ensure no layout breaks or styling regressions\n- **Browser testing:** Test in the actual browser, not just TypeScript compilation\n\n### 4. BREAKING CHANGE PROTOCOL\n\nIf a requested change requires any of the following, **STOP and report to the user FIRST:**\n\n**Triggers for Breaking Change Protocol:**\n- Refactoring more than 5 files\n- Changing core data structures, schemas, or type definitions\n- Restructuring routing or navigation architecture\n- Rebuilding major UI components or layouts\n- Migrating to different libraries or frameworks\n- Changing state management patterns\n- Modifying API contracts or data fetching logic\n- Altering authentication or authorization flows\n\n**Required Report Format:**\n\n```\n\ud83d\udea8 BREAKING CHANGE ALERT\n\nSCOPE:\n- X files affected\n- Y components require refactoring\n- Z routes need restructuring\n\nREASON:\n[Explain why this change requires major refactoring]\n\nAFFECTED SYSTEMS:\n- [List all major systems/features affected]\n\nRISKS:\n- [Potential breaking changes]\n- [Data migration concerns]\n- [Backward compatibility issues]\n\nALTERNATIVES:\n- [Option 1: Description]\n- [Option 2: Description]\n\nRECOMMENDATION:\n[Your recommended approach]\n\n\u23f8\ufe0f AWAITING USER CONFIRMATION TO PROCEED\n```\n\n**Wait for explicit user confirmation before proceeding with breaking changes.**\n\n### 5. CHECKPOINT DISCIPLINE\n\nMaintain proper version control and recovery points:\n\n- **Before major refactoring:** Always save a checkpoint before attempting significant architectural changes\n- **After successful features:** Save checkpoints after successfully integrating new features or completing milestones\n- **Never deliver broken states:** Do not save checkpoints or deliver to users when the system has known errors\n- **Meaningful descriptions:** Write clear, descriptive checkpoint messages that explain what was accomplished\n\n---\n",
      "Production-Ready Code Standard": "\n### Absolute Requirements\n\n**NO PLACEHOLDERS OR STUBS**\n\n\u274c **NEVER use:**\n- \"TODO\", \"FIXME\", \"Coming Soon\", \"Placeholder\"\n- \"To be implemented\", \"Not yet working\"\n- Pseudo-code or commented-out logic\n- Empty function bodies with comments\n- Mock data labeled as \"temporary\" without full implementation\n- Disabled features with \"enable later\" comments\n\n\u2705 **ALWAYS implement:**\n- Complete, functional, production-ready code\n- Real interactions for every UI element\n- Proper error handling and loading states\n- Full validation logic for all forms\n- Complete data flows from source to UI\n- Graceful degradation for edge cases\n\n### Full Implementation Mandate\n\nEvery deliverable must meet these standards:\n\n1. **Components:**\n   - Fully functional with all props properly typed\n   - Complete interaction logic (clicks, hovers, focus states)\n   - Proper accessibility attributes (ARIA labels, keyboard navigation)\n   - Loading and error states handled\n   - Responsive design implemented\n\n2. **Features:**\n   - Work end-to-end from user action to result\n   - Include proper validation and error messages\n   - Handle edge cases gracefully\n   - Provide user feedback for all actions\n\n3. **Data Flows:**\n   - Complete from source to UI rendering\n   - Use realistic, comprehensive mock data if backend unavailable\n   - Include proper type definitions\n   - Handle loading, success, and error states\n\n4. **Forms:**\n   - Full validation logic (client-side)\n   - Clear error messages\n   - Submission handling with feedback\n   - Proper disabled/loading states during submission\n\n5. **Error Handling:**\n   - Try-catch blocks where appropriate\n   - User-friendly error messages\n   - Fallback UI for error states\n   - Console logging for debugging (can be removed in production)\n\n### Exception Protocol - If Stubs Are Unavoidable\n\nIf technical constraints genuinely require creating incomplete implementation:\n\n**STOP and explicitly report:**\n\n```\n\ud83d\udea8 INCOMPLETE IMPLEMENTATION ALERT\n\nINCOMPLETE FEATURE: [Name]\n\nWHAT IS INCOMPLETE:\n- [Specific functionality missing]\n\nWHY IT'S INCOMPLETE:\n- [Technical constraint or blocker]\n\nMISSING FUNCTIONALITY:\n- [Detailed list of what's not implemented]\n\nCOMPLETION REQUIREMENTS:\n- [What would be needed to complete it]\n\nCOMPLETION PLAN:\n- [When/how it will be completed]\n\n\u23f8\ufe0f AWAITING USER ACKNOWLEDGMENT\n```\n\n**Wait for user acknowledgment before proceeding.**\n\n### Task Completion Reporting\n\nWhen reporting task completion, MUST include:\n\n\u2705 **Production Ready Confirmation:**\n- \"All features are production-ready and fully functional\"\n- \"No placeholders, stubs, or incomplete implementations\"\n\n\u2705 **Known Limitations:**\n- List any intentional simplifications (e.g., \"Using mock data instead of API\")\n- Explain any features intentionally scoped out\n\n\u2705 **Incomplete Work Alerts:**\n- Flag ANY incomplete work with \ud83d\udea8 alerts\n- Provide clear reasoning and completion plan\n\n\u2705 **Status Declaration:**\n- \"STATUS: PRODUCTION READY\" or\n- \"STATUS: INCOMPLETE - [specific reason]\"\n\n---\n",
      "Quality Standards Checklist": "\n### Code Quality\n\n- [ ] **Clean Code:**\n  - Meaningful variable and function names\n  - Proper code organization and structure\n  - No commented-out code blocks\n  - Consistent formatting and style\n\n- [ ] **Type Safety:**\n  - All TypeScript types properly defined\n  - No `any` types unless absolutely necessary\n  - Proper interface definitions for props\n  - Type guards where needed\n\n- [ ] **Maintainability:**\n  - DRY principle (Don't Repeat Yourself)\n  - Single Responsibility Principle\n  - Proper separation of concerns\n  - Reusable components and utilities\n\n### UI/UX Quality\n\n- [ ] **Visual Polish:**\n  - Proper spacing and alignment\n  - Consistent colors from design system\n  - Smooth transitions and animations\n  - Professional typography\n\n- [ ] **Interactions:**\n  - Hover states for interactive elements\n  - Focus states for keyboard navigation\n  - Active/pressed states for buttons\n  - Loading indicators for async operations\n  - Disabled states where appropriate\n\n- [ ] **Responsive Design:**\n  - Works on mobile (320px+)\n  - Works on tablet (768px+)\n  - Works on desktop (1024px+)\n  - Proper breakpoints used\n  - No horizontal scrolling\n\n- [ ] **Accessibility:**\n  - Semantic HTML elements\n  - ARIA labels where needed\n  - Keyboard navigation support\n  - Sufficient color contrast\n  - Screen reader compatibility\n\n### Functionality\n\n- [ ] **Error Handling:**\n  - Try-catch for async operations\n  - User-friendly error messages\n  - Fallback UI for errors\n  - Network error handling\n\n- [ ] **Loading States:**\n  - Skeleton loaders or spinners\n  - Disabled states during loading\n  - Progress indicators for long operations\n\n- [ ] **Data Validation:**\n  - Form validation with clear messages\n  - Input sanitization\n  - Type checking for data structures\n  - Edge case handling\n\n- [ ] **Performance:**\n  - No unnecessary re-renders\n  - Proper use of React hooks\n  - Lazy loading where appropriate\n  - Optimized images and assets\n\n---\n",
      "Reference Documentation": "\n### Core Documents\n\nThe following documents contain comprehensive research and guidelines for TERP development:\n\n1. **TERP_DESIGN_SYSTEM.md**\n   - Comprehensive UX/UI research synthesis\n   - Design principles and patterns\n   - Component library guidelines\n   - Color, typography, and spacing systems\n   - Accessibility standards\n   - Interaction patterns\n\n2. **TERP_IMPLEMENTATION_STRATEGY.md**\n   - Phased development roadmap\n   - Technology stack decisions\n   - Architecture patterns\n   - Module-by-module implementation plan\n   - Testing and validation strategies\n\n### Research Foundation\n\nThe TERP design system is based on comprehensive research across 12 key UX/UI topics:\n\n1. **Information Architecture & Navigation**\n   - Persistent sidebar for internal tools\n   - Clear visual hierarchy\n   - Breadcrumb navigation for deep structures\n\n2. **Data Tables & Grids**\n   - Advanced filtering and sorting\n   - Inline editing capabilities\n   - Bulk actions support\n   - Column customization\n\n3. **Forms & Input Validation**\n   - Real-time validation\n   - Clear error messaging\n   - Progressive disclosure\n   - Smart defaults\n\n4. **Dashboard Design**\n   - Customizable widgets\n   - Key metrics at-a-glance\n   - Drill-down capabilities\n   - Responsive layouts\n\n5. **Search & Filtering**\n   - Global search functionality\n   - Advanced filters\n   - Saved searches\n   - Search suggestions\n\n6. **Responsive Design**\n   - Mobile-first approach\n   - Adaptive layouts\n   - Touch-friendly interactions\n   - Progressive enhancement\n\n7. **Accessibility (WCAG 2.1)**\n   - Keyboard navigation\n   - Screen reader support\n   - Color contrast compliance\n   - Focus management\n\n8. **Performance Optimization**\n   - Code splitting\n   - Lazy loading\n   - Optimized rendering\n   - Asset optimization\n\n9. **Error Handling & Feedback**\n   - Contextual error messages\n   - Toast notifications\n   - Inline validation\n   - Recovery suggestions\n\n10. **Workflow & Task Management**\n    - Status tracking\n    - Action queues\n    - Progress indicators\n    - Batch operations\n\n11. **Color Theory & Visual Hierarchy**\n    - Consistent color palette\n    - Semantic colors for status\n    - Visual weight and emphasis\n    - White space utilization\n\n12. **Typography & Readability**\n    - Clear font hierarchy\n    - Optimal line length\n    - Proper contrast\n    - Responsive typography\n\n### Design Principles\n\n**Core Principles Applied Throughout TERP:**\n\n1. **Clarity Over Cleverness**\n   - Prioritize user understanding over novel interactions\n   - Use familiar patterns and conventions\n   - Provide clear labels and instructions\n\n2. **Progressive Disclosure**\n   - Show essential information first\n   - Reveal complexity as needed\n   - Avoid overwhelming users\n\n3. **Consistency**\n   - Maintain design patterns across modules\n   - Use consistent terminology\n   - Apply uniform interaction models\n\n4. **Feedback & Responsiveness**\n   - Acknowledge all user actions\n   - Provide clear status indicators\n   - Show progress for long operations\n\n5. **Error Prevention & Recovery**\n   - Validate input in real-time\n   - Provide helpful error messages\n   - Offer clear recovery paths\n\n6. **Efficiency for Experts**\n   - Keyboard shortcuts for power users\n   - Bulk actions for repetitive tasks\n   - Customizable workflows\n\n7. **Accessibility First**\n   - Design for all users from the start\n   - Test with assistive technologies\n   - Exceed minimum compliance standards\n\n---\n",
      "Usage Guidelines": "\n### For Developers\n\n1. **Before Starting Work:**\n   - Review this document\n   - Check TERP_DESIGN_SYSTEM.md for design patterns\n   - Review TERP_IMPLEMENTATION_STRATEGY.md for architecture\n\n2. **During Development:**\n   - Follow the System Integration Protocol\n   - Maintain Production-Ready Code Standard\n   - Use the Quality Standards Checklist\n\n3. **Before Completion:**\n   - Run full system validation\n   - Complete the Quality Standards Checklist\n   - Prepare proper completion report\n\n### For AI Assistants\n\nWhen working on TERP in future sessions:\n\n1. **Session Start:**\n   - Read this document first\n   - Review existing implementation\n   - Understand current architecture\n\n2. **Change Requests:**\n   - Perform Impact Analysis\n   - Follow Integration Verification steps\n   - Apply Breaking Change Protocol when needed\n\n3. **Delivery:**\n   - Ensure Production-Ready standards\n   - Complete System-Wide Validation\n   - Provide comprehensive completion report\n\n---\n",
      "Deployment Monitoring Protocol": "\n### ALWAYS Monitor Deployments After Push\n\nWhenever code is pushed to GitHub, **immediately monitor the deployment** to catch issues early.\n\n#### Required Actions After Every `git push`:\n\n1. **Wait for Build** (2-3 minutes)\n   - Don't assume success\n   - Actively wait and monitor\n\n2. **Check Deployment Status**\n   - Render: Check deployment logs in dashboard or via API\n   - Railway: Check deployment status and logs\n   - Vercel: Check deployment status\n\n3. **Verify Application Health**\n   - Load the production URL\n   - Check for 502/500 errors\n   - Verify critical pages load\n   - Check browser console for errors\n\n4. **Review Deployment Logs**\n   - Look for ERROR messages\n   - Check migration success\n   - Verify environment variables loaded\n   - Confirm server started successfully\n\n5. **Take Immediate Action on Failures**\n   - Don't wait for user to report issues\n   - Debug and fix immediately\n   - Roll back if necessary\n\n#### Deployment Credentials\n\nStored in: `/docs/DEPLOYMENT_CREDENTIALS.md` (DO NOT COMMIT TO PUBLIC REPOS)\n\n- **Render API Key:** For autonomous deployment monitoring\n- **Railway Token:** For CLI access and monitoring\n\n#### Autonomous Monitoring Commands\n\n**Render:**\n```bash\n# Check service status\ncurl -H \"Authorization: Bearer $RENDER_API_KEY\" \\\n  https://api.render.com/v1/services\n\n# Get deployment logs\ncurl -H \"Authorization: Bearer $RENDER_API_KEY\" \\\n  https://api.render.com/v1/services/{serviceId}/deploys\n```\n\n**Railway:**\n```bash\nexport RAILWAY_TOKEN=your_token\nrailway status\nrailway logs\n```\n\n### Why This Matters\n\n- **Catch issues immediately** before they affect users\n- **Faster debugging** with fresh context\n- **Production reliability** through proactive monitoring\n- **Autonomous operation** reduces manual intervention\n\n**Remember:** A successful `git push` doesn't mean successful deployment. Always verify!\n\n---\n",
      "Version Management Protocol": "\n### MANDATORY: Update Version on Every GitHub Push\n\nTo ensure version traceability and deployment verification, **every single GitHub push MUST include a version update**.\n\n#### Version File Location\n\n`/version.json` in the project root:\n\n```json\n{\n  \"version\": \"1.0.0\",\n  \"commit\": \"abc1234\",\n  \"date\": \"2025-10-27\",\n  \"description\": \"Brief description of changes\"\n}\n```\n\n#### Required Actions Before Every `git push`:\n\n1. **Update Commit Hash**\n   ```bash\n   # Get current commit hash (short form)\n   git rev-parse --short HEAD\n   ```\n   - Update `commit` field in `version.json` with the current commit hash\n\n2. **Update Date**\n   - Set `date` field to current date in YYYY-MM-DD format\n\n3. **Update Description**\n   - Briefly describe what changed in this push\n   - Examples: \"Added version display\", \"Fixed login bug\", \"Updated accounting module\"\n\n4. **Increment Version (if applicable)**\n   - For major features: increment minor version (1.0.0 \u2192 1.1.0)\n   - For bug fixes: increment patch version (1.0.0 \u2192 1.0.1)\n   - For breaking changes: increment major version (1.0.0 \u2192 2.0.0)\n\n#### Version Display Implementation\n\nThe version is displayed persistently in the application header:\n\n- **Desktop:** Shows both version number and commit hash\n- **Mobile:** Shows commit hash only (space-constrained)\n- **Location:** `client/src/components/layout/AppHeader.tsx`\n- **Import:** `import versionInfo from '../../../version.json'`\n\n#### Why This Matters\n\n- **Deployment Verification:** User can verify they're working with the correct deployed version\n- **Debugging:** Quickly identify which code version is running in production\n- **Traceability:** Link production issues to specific commits\n- **Accountability:** Clear history of what changed and when\n\n#### Enforcement\n\n**This is a MANDATORY protocol. Every Manus agent MUST:**\n\n1. Check `version.json` before pushing to GitHub\n2. Update the commit hash to match the current HEAD\n3. Update the date to current date\n4. Update the description with a brief summary of changes\n5. Only then proceed with `git push`\n\n**Failure to update version.json is a protocol violation.**\n\n---\n",
      "13. Future Architecture Compatibility Protocol": "\n### Context\n\nTERP is evolving toward a **secure home office architecture** with:\n- Air-gapped core server\n- VPN-only access (WireGuard)\n- Multi-factor authentication (VPN + device certificate + biometric)\n- Offline-first Progressive Web App (PWA)\n- Redis caching layer\n- Comprehensive monitoring (Prometheus + Grafana)\n\nThis evolution is planned for **8 weeks / 160 hours** of implementation work.\n\n### The Challenge\n\nHow do we continue current development without creating work that will need to be undone or redone when implementing this vision?\n\n### The Solution\n\nAll development work MUST be **forward-compatible** with the future architecture by following these protocols.\n\n---\n\n### 13.1 Authentication Abstraction\n\n**Rule:** Use `authProvider` interface, never call authentication provider (Clerk) directly.\n\n**Why:** When we add MFA (multi-factor authentication), we can replace the implementation without changing any calling code.\n\n**Implementation:**\n\n```typescript\n// \u2705 GOOD - Uses abstraction\nimport { authProvider } from '../_core/authProvider';\nconst user = await authProvider.requireAuth(req);\n\n// \u274c BAD - Direct Clerk call (will need refactoring)\nimport { getAuth } from '@clerk/express';\nconst { userId } = getAuth(req);\n```\n\n**Files:**\n- `server/_core/authProvider.ts` - Authentication abstraction interface\n- All routers MUST use this interface\n\n**Verification:**\n- [ ] No direct Clerk imports in new code\n- [ ] All authentication uses `authProvider` interface\n\n---\n\n### 13.2 Data Access Abstraction\n\n**Rule:** Use `dataProvider` interface, never call `getDb()` directly.\n\n**Why:** When we add Redis caching and offline sync, we can intercept all data access without changing business logic.\n\n**Implementation:**\n\n```typescript\n// \u2705 GOOD - Uses abstraction\nimport { dataProvider } from '../_core/dataProvider';\nconst orders = await dataProvider.query(db => \n  db.select().from(orders).where(eq(orders.orgId, orgId))\n);\n\n// \u274c BAD - Direct database call (will need refactoring)\nimport { getDb } from '../db';\nconst db = await getDb();\nconst orders = await db.select().from(orders);\n```\n\n**Files:**\n- `server/_core/dataProvider.ts` - Data access abstraction interface\n- All `*Db.ts` files MUST use this interface\n\n**Verification:**\n- [ ] No direct `getDb()` calls in new code\n- [ ] All data access uses `dataProvider` interface\n\n---\n\n### 13.3 Offline-First API Design\n\n**Rule:** All mutation endpoints MUST return full objects, timestamps, and affected records.\n\n**Why:** Enables optimistic UI updates, conflict resolution, and cache invalidation for offline-first PWA.\n\n**Implementation:**\n\n```typescript\n// \u2705 GOOD - Offline-friendly response\nexport const ordersRouter = router({\n  create: protectedProcedure\n    .input(createOrderSchema)\n    .mutation(async ({ input, ctx }) => {\n      const order = await ordersDb.createOrder(input, ctx.user.organizationId);\n      return {\n        order,  // Full object for optimistic update\n        affectedRecords: {  // For cache invalidation\n          orders: [order.id],\n          inventory: order.items.map(i => i.inventoryId),\n        },\n        timestamp: new Date(),  // For conflict resolution\n      };\n    }),\n});\n\n// \u274c BAD - Not offline-friendly (requires another query)\nexport const ordersRouter = router({\n  create: protectedProcedure\n    .input(createOrderSchema)\n    .mutation(async ({ input, ctx }) => {\n      const orderId = await ordersDb.createOrder(input);\n      return { orderId };  // Client needs to fetch full object!\n    }),\n});\n```\n\n**Required Response Fields:**\n- `[resource]`: Full object that was created/updated\n- `affectedRecords`: Object mapping resource types to affected IDs\n- `timestamp`: ISO timestamp for conflict resolution\n\n**Verification:**\n- [ ] Mutation returns full object (not just ID)\n- [ ] Response includes `affectedRecords`\n- [ ] Response includes `timestamp`\n\n---\n\n### 13.4 Schema Evolution\n\n**Rule:** All schema changes MUST be additive, never breaking.\n\n**Why:** Enables zero-downtime deployments and backward compatibility during the 8-week transition.\n\n**Implementation:**\n\n```typescript\n// \u2705 GOOD - Additive change (backward compatible)\nexport const users = mysqlTable('users', {\n  id: serial('id').primaryKey(),\n  email: varchar('email', { length: 255 }).notNull(),\n  // ... existing fields ...\n  \n  // NEW: Nullable for backward compatibility\n  mfaEnabled: boolean('mfa_enabled').default(false),\n  deviceCertificateRequired: boolean('device_certificate_required').default(false),\n});\n\n// \u274c BAD - Breaking change (renames field)\nexport const users = mysqlTable('users', {\n  id: serial('id').primaryKey(),\n  emailAddress: varchar('email_address', { length: 255 }),  // RENAMED - BREAKS CODE!\n});\n```\n\n**Rules:**\n- **NEVER** rename existing columns (add new ones instead)\n- **NEVER** delete existing tables (mark as deprecated instead)\n- **ALWAYS** make new fields nullable or provide defaults\n- **ALWAYS** use migrations for schema changes\n\n**Verification:**\n- [ ] No renamed columns\n- [ ] No deleted tables\n- [ ] New fields are nullable or have defaults\n- [ ] Migration file created\n\n---\n\n### 13.5 Code Organization\n\n**Rule:** Routers THIN (< 50 lines per procedure), Business logic in `*Db.ts` files.\n\n**Why:** Keeps authentication, validation, and business logic separated for easier refactoring.\n\n**File Structure:**\n\n```\nserver/\n\u251c\u2500\u2500 _core/                    # Core infrastructure (abstraction layer)\n\u2502   \u251c\u2500\u2500 authProvider.ts       # Authentication abstraction\n\u2502   \u251c\u2500\u2500 dataProvider.ts       # Data access abstraction\n\u2502   \u251c\u2500\u2500 errors.ts             # Error handling\n\u2502   \u251c\u2500\u2500 logger.ts             # Logging\n\u2502   \u2514\u2500\u2500 monitoring.ts         # Monitoring\n\u251c\u2500\u2500 auth/                     # Authentication logic (FUTURE: MFA goes here)\n\u2502   \u2514\u2500\u2500 (reserved for future)\n\u251c\u2500\u2500 routers/                  # API endpoints (THIN - just validation & delegation)\n\u2502   \u251c\u2500\u2500 orders.ts\n\u2502   \u251c\u2500\u2500 inventory.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 *Db.ts                    # Business logic (THICK - all logic here)\n\u2502   \u251c\u2500\u2500 ordersDb.ts\n\u2502   \u251c\u2500\u2500 inventoryDb.ts\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 utils/                    # Shared utilities\n```\n\n**Router Pattern (THIN):**\n\n```typescript\n// \u2705 GOOD - Thin router (< 50 lines per procedure)\nexport const ordersRouter = router({\n  create: protectedProcedure\n    .input(createOrderSchema)\n    .mutation(async ({ input, ctx }) => {\n      return await ordersDb.createOrder(input, ctx.user.organizationId);\n    }),\n});\n\n// \u274c BAD - Fat router with business logic\nexport const ordersRouter = router({\n  create: protectedProcedure\n    .input(createOrderSchema)\n    .mutation(async ({ input, ctx }) => {\n      // 100+ lines of business logic here - BAD!\n      const db = await getDb();\n      const order = await db.transaction(async (tx) => {\n        // Complex business logic...\n      });\n      return order;\n    }),\n});\n```\n\n**Business Logic Pattern (THICK):**\n\n```typescript\n// \u2705 GOOD - Business logic in ordersDb.ts\nexport async function createOrder(input: CreateOrderInput, orgId: number) {\n  return await dataProvider.transaction(async (tx) => {\n    // All business logic here\n    // Validation, calculations, database operations\n    // Can be 100+ lines - that's fine!\n  });\n}\n```\n\n**Verification:**\n- [ ] Router procedures < 50 lines\n- [ ] Business logic in `*Db.ts` files\n- [ ] No database queries in routers\n\n---\n\n### 13.6 Pre-Push Compatibility Checklist\n\n**MANDATORY:** Before every `git push`, verify:\n\n**Authentication:**\n- [ ] Uses `authProvider` interface (not Clerk directly)\n- [ ] No direct authentication provider imports in new code\n\n**Data Access:**\n- [ ] Uses `dataProvider` interface (not `getDb()` directly)\n- [ ] No direct database access in new code\n\n**API Design:**\n- [ ] Mutations return full objects (not just IDs)\n- [ ] Responses include `affectedRecords`\n- [ ] Responses include `timestamp`\n\n**Schema:**\n- [ ] Schema changes are additive only\n- [ ] No renamed columns or deleted tables\n- [ ] New fields are nullable or have defaults\n- [ ] Migration file created\n\n**Code Organization:**\n- [ ] Router procedures < 50 lines\n- [ ] Business logic in `*Db.ts` files\n- [ ] No business logic in routers\n\n**Failure to meet these criteria is a protocol violation.**\n\n---\n\n### 13.7 Reference Documents\n\n**For Detailed Guidance:**\n- `docs/PRODUCT_DEVELOPMENT_STRATEGY.md` - Full 8-week implementation strategy\n- `docs/MANUS_AGENT_CONTEXT.md` - Quick reference for AI agents\n- `docs/TERP_Codebase_Implementation_Specification.md` - Complete future architecture spec\n\n**For Quick Reference:**\n- See `docs/MANUS_AGENT_CONTEXT.md` for code examples and patterns\n\n---\n",
      "Version History": "\n**v3.0 - October 27, 2025**\n- Added Future Architecture Compatibility Protocol (Section 13)\n- Documented authentication abstraction requirements\n- Documented data access abstraction requirements\n- Documented offline-first API design patterns\n- Documented schema evolution rules\n- Added pre-push compatibility checklist\n- Created reference to PRODUCT_DEVELOPMENT_STRATEGY.md\n- Created reference to MANUS_AGENT_CONTEXT.md\n\n**v2.1 - October 27, 2025**\n- Added Version Management Protocol (MANDATORY)\n- Implemented persistent version display in header\n- Added version.json for version tracking\n- Updated tsconfig.json to support JSON imports\n\n**v2.0 - October 24, 2025**\n- Added complete accounting module documentation\n- Updated with mobile optimization patterns\n- Added 60+ accounting API endpoints\n- Documented 10 accounting pages and 6 UI components\n- Comprehensive database schema (17 tables total)\n\n**v1.0 - October 23, 2025**\n- Initial protocol documentation\n- Integrated comprehensive UX/UI research\n- Established change management procedures\n- Defined production-ready standards\n- Created quality checklists\n\n---\n",
      "Contact & Feedback": "\nFor questions, clarifications, or protocol updates, consult the project maintainer or update this document with team consensus.\n\n**Remember:** These protocols exist to maintain quality, consistency, and system integrity. They are not bureaucratic overhead\u2014they are essential guardrails for sustainable development.\n\n"
    }
  },
  "protocols": {
    "agent_onboarding": "# TERP Agent Onboarding\n\n**Purpose:** Quick start guide for new development agents working on TERP.\n\n**Last Updated:** October 27, 2025\n\n---\n\n## Welcome!\n\nYou're about to work on **TERP**, a modern ERP system redesign focused on simplicity and exceptional UX/UI. This document will get you oriented quickly.\n\n---\n\n## \ud83d\ude80 Quick Start (5 Minutes)\n\n### Step 1: Read These Files (In Order)\n\n1. **[PROJECT_CONTEXT.md](./PROJECT_CONTEXT.md)** (5 min)\n   - Understand the overall system architecture\n   - See what's already built\n   - Learn the tech stack\n\n2. **[DEVELOPMENT_PROTOCOLS.md](./DEVELOPMENT_PROTOCOLS.md)** (10 min)\n   - **This is \"The Bible\"** - all development rules and standards\n   - MUST follow these protocols for all work\n   - Zero TypeScript errors, production-ready code only\n\n3. **[roadmaps/ACTIVE.md](./roadmaps/ACTIVE.md)** (2 min)\n   - See what you're working on right now\n   - Check current phase and tasks\n\n4. **[notes/user-feedback.md](./notes/user-feedback.md)** (2 min)\n   - **Check this EVERY session** - owner's latest feedback\n   - See if there are any new instructions or thoughts\n\n5. **[HANDOFF_CONTEXT.md](./HANDOFF_CONTEXT.md)** (2 min)\n   - See what the last agent did\n   - Understand current state and next steps\n\n---\n\n## \ud83d\udccb Your Workflow\n\n### At Start of Every Session\n\n```\n1. \u2705 Read notes/user-feedback.md (new feedback?)\n2. \u2705 Read HANDOFF_CONTEXT.md (what did last agent do?)\n3. \u2705 Read roadmaps/ACTIVE.md (what am I working on?)\n4. \u2705 Review DEVELOPMENT_PROTOCOLS.md (refresh on standards)\n5. \u2705 Clone repo if needed: gh repo clone EvanTenenbaum/TERP\n```\n\n### During Work\n\n```\n1. \u2705 Follow DEVELOPMENT_PROTOCOLS.md strictly\n2. \u2705 Update roadmap file as you complete tasks\n3. \u2705 Commit changes regularly with clear messages\n4. \u2705 Run `pnpm run check` before committing (zero TS errors)\n5. \u2705 Test your changes thoroughly\n```\n\n### Before Ending Session\n\n```\n1. \u2705 Update roadmap with current status\n2. \u2705 Update HANDOFF_CONTEXT.md with:\n   - What you completed\n   - What's next\n   - Any blockers or issues\n3. \u2705 Update CHANGELOG.md with completed work\n4. \u2705 Commit and push all changes\n5. \u2705 Verify zero TypeScript errors\n```\n\n---\n\n## \ud83d\udcc1 Documentation Structure\n\n```\n/docs/\n\u251c\u2500\u2500 AGENT_ONBOARDING.md          \u2190 You are here\n\u251c\u2500\u2500 PROJECT_CONTEXT.md            \u2190 Overall project state\n\u251c\u2500\u2500 DEVELOPMENT_PROTOCOLS.md      \u2190 \"The Bible\" - development rules\n\u251c\u2500\u2500 HANDOFF_CONTEXT.md            \u2190 Latest session handoff\n\u251c\u2500\u2500 CHANGELOG.md                  \u2190 Completed work history\n\u2502\n\u251c\u2500\u2500 roadmaps/                     \u2190 All implementation roadmaps\n\u2502   \u251c\u2500\u2500 README.md                 \u2190 Master index\n\u2502   \u251c\u2500\u2500 ACTIVE.md                 \u2190 Current roadmap (start here!)\n\u2502   \u2514\u2500\u2500 [specific-roadmaps].md\n\u2502\n\u251c\u2500\u2500 notes/                        \u2190 Owner's feedback and thoughts\n\u2502   \u251c\u2500\u2500 README.md                 \u2190 How to use notes\n\u2502   \u251c\u2500\u2500 user-feedback.md          \u2190 CHECK THIS EVERY SESSION!\n\u2502   \u251c\u2500\u2500 feature-ideas.md          \u2190 Future features\n\u2502   \u2514\u2500\u2500 known-issues.md           \u2190 Bugs and issues\n\u2502\n\u2514\u2500\u2500 specs/                        \u2190 Detailed specifications\n    \u2514\u2500\u2500 [various-specs].md\n```\n\n---\n\n## \u26a0\ufe0f Critical Rules\n\n### Must Do\n- \u2705 **Always check `notes/user-feedback.md` first** - this is how the owner communicates with you\n- \u2705 **Follow DEVELOPMENT_PROTOCOLS.md** - no exceptions\n- \u2705 **Zero TypeScript errors** - run `pnpm run check` before committing\n- \u2705 **Update roadmap as you work** - keep it current\n- \u2705 **Update HANDOFF_CONTEXT.md before finishing** - next agent needs to know what you did\n\n### Never Do\n- \u274c **Never skip reading user-feedback.md** - you might miss critical instructions\n- \u274c **Never commit TypeScript errors** - must be zero errors\n- \u274c **Never use placeholders or stubs** - production-ready code only\n- \u274c **Never forget to update HANDOFF_CONTEXT.md** - next agent will be lost\n- \u274c **Never expose pricing/COGS data to clients** - security critical\n\n---\n\n## \ud83c\udfaf Current Focus\n\n**Active Roadmap:** Default Values Implementation\n\n**Current Phase:** Phase 1 - Master Data & Foundation\n\n**Your Job:**\n1. Read the full roadmap: [roadmaps/defaults-implementation.md](./roadmaps/defaults-implementation.md)\n2. Read the specifications: [roadmaps/defaults-specifications.md](./roadmaps/defaults-specifications.md)\n3. Start with Phase 1 tasks\n4. Update roadmap as you complete tasks\n\n**Critical Security Note:**\n\u26a0\ufe0f Pricing profiles, markup percentages, and COGS adjustments must be completely hidden from client-facing views. Triple check all client-facing code.\n\n---\n\n## \ud83d\udee0\ufe0f Tech Stack Quick Reference\n\n**Frontend:**\n- React 19, TypeScript, Tailwind CSS 4, shadcn/ui\n- Vite (build tool), pnpm (package manager)\n\n**Backend:**\n- Node.js, tRPC, Drizzle ORM\n- MySQL 8.0 database\n\n**Development:**\n```bash\npnpm install          # Install dependencies\npnpm dev              # Start dev server\npnpm run check        # Check TypeScript (must be zero errors)\npnpm test             # Run tests\npnpm db:push          # Push schema changes to database\n```\n\n---\n\n## \ud83d\udcda Key Documents by Purpose\n\n**Understanding the Project:**\n- [PROJECT_CONTEXT.md](./PROJECT_CONTEXT.md) - What TERP is and what's built\n- [TERP_DESIGN_SYSTEM.md](./TERP_DESIGN_SYSTEM.md) - UI/UX design principles\n\n**Development Standards:**\n- [DEVELOPMENT_PROTOCOLS.md](./DEVELOPMENT_PROTOCOLS.md) - **THE BIBLE** - all rules\n\n**Current Work:**\n- [roadmaps/ACTIVE.md](./roadmaps/ACTIVE.md) - What you're working on\n- [notes/user-feedback.md](./notes/user-feedback.md) - Owner's latest thoughts\n\n**Handoffs:**\n- [HANDOFF_CONTEXT.md](./HANDOFF_CONTEXT.md) - What last agent did\n- [CHANGELOG.md](./CHANGELOG.md) - History of completed work\n\n**Specifications:**\n- [specs/](./specs/) - Detailed specs for various modules\n\n---\n\n## \ud83e\udd1d Communication with Owner\n\n**Owner \u2192 You:**\n- Owner adds feedback to `notes/user-feedback.md`\n- You check it at start of every session\n- Follow any instructions or incorporate feedback\n\n**You \u2192 Owner:**\n- Update roadmap with progress\n- Update HANDOFF_CONTEXT.md with status\n- Add issues to `notes/known-issues.md`\n- Commit changes so owner can review\n\n---\n\n## \u2753 Common Questions\n\n**Q: Where do I start?**\nA: Read this file, then PROJECT_CONTEXT.md, then DEVELOPMENT_PROTOCOLS.md, then roadmaps/ACTIVE.md\n\n**Q: What am I working on?**\nA: Check `roadmaps/ACTIVE.md` - it always points to the current roadmap\n\n**Q: How do I know what the last agent did?**\nA: Read `HANDOFF_CONTEXT.md`\n\n**Q: Where does the owner leave feedback?**\nA: `notes/user-feedback.md` - check it every session!\n\n**Q: How do I update the roadmap?**\nA: Edit the roadmap file directly, check off completed tasks with `- [x]`, commit changes\n\n**Q: What if I find a bug?**\nA: Add it to `notes/known-issues.md` with details\n\n**Q: What if I have a question?**\nA: Add it to `notes/user-feedback.md` and the owner will respond\n\n---\n\n## \u2705 Checklist: Am I Ready?\n\nBefore you start coding, make sure you've:\n\n- [ ] Read PROJECT_CONTEXT.md\n- [ ] Read DEVELOPMENT_PROTOCOLS.md (The Bible)\n- [ ] Read roadmaps/ACTIVE.md\n- [ ] Read notes/user-feedback.md\n- [ ] Read HANDOFF_CONTEXT.md\n- [ ] Cloned the repo (if needed)\n- [ ] Understand what you're working on\n- [ ] Know the current phase and tasks\n\nIf you've checked all boxes, you're ready to start! \ud83d\ude80\n\n---\n\n## \ud83c\udf93 Pro Tips\n\n1. **Always check user-feedback.md first** - saves time and prevents rework\n2. **Update roadmap as you go** - don't wait until the end\n3. **Commit frequently** - small commits are easier to review\n4. **Run `pnpm run check` often** - catch TypeScript errors early\n5. **Read DEVELOPMENT_PROTOCOLS.md multiple times** - it's that important\n6. **Update HANDOFF_CONTEXT.md thoroughly** - help the next agent\n\n---\n\n## \ud83c\udd98 If You Get Stuck\n\n1. Re-read DEVELOPMENT_PROTOCOLS.md\n2. Check if there's a spec in `docs/specs/`\n3. Review similar existing code in the repo\n4. Add a question to `notes/user-feedback.md` for the owner\n5. Document the blocker in HANDOFF_CONTEXT.md\n\n---\n\n**You're all set! Start with `roadmaps/ACTIVE.md` and happy coding! \ud83d\ude80**\n\n",
    "quick_reference": "# TERP Development - Quick Reference\n\n## \ud83c\udf10 Live Development URL\n**https://3001-ichtogremfzu0pbcw8rfc-2ba70fb0.manusvm.computer**\n\n## \ud83d\ude80 Quick Commands\n\n### Update & Restart\n```bash\ncd /home/ubuntu/TERP\ngit pull origin main\npnpm install\npnpm build\npkill -f \"node dist/index.js\"\nnode dist/index.js > /tmp/terp-server.log 2>&1 &\n```\n\n### Check Status\n```bash\n# Server running?\nps aux | grep \"node dist\"\n\n# View logs\ntail -f /tmp/terp-server.log\n\n# Database accessible?\nmysql -u terp_user -pterp_production_2024 terp_production -e \"SHOW TABLES;\"\n```\n\n### Database\n```bash\n# Connect\nmysql -u terp_user -pterp_production_2024 terp_production\n\n# Run migrations\ncd /home/ubuntu/TERP && pnpm db:push\n\n# Backup\nmysqldump -u terp_user -pterp_production_2024 terp_production > backup.sql\n```\n\n## \ud83d\udce6 What's Deployed\n\n### All Features (100% Complete)\n- \u2705 Transaction & Credit Management\n- \u2705 Bad Debt Write-Off\n- \u2705 Inventory Tracking & Movements\n- \u2705 Accounting Integration & COGS\n- \u2705 Audit Logging\n- \u2705 Sample Management\n- \u2705 Dashboard Analytics\n- \u2705 Sales Sheet Enhancements\n- \u2705 Advanced Tag Features\n- \u2705 **Product Intake Flow** (batch-by-batch with vendor receipts)\n- \u2705 Recurring Orders\n- \u2705 Reorder Functionality\n- \u2705 Payment Terms Management\n- \u2705 Product Recommendations\n- \u2705 Alert Configuration\n\n### Database Tables (30+)\nAll migrations applied (0012-0018)\n\n### API Endpoints (70+)\nAll routers registered and functional\n\n## \ud83d\udd27 Common Tasks\n\n### Add New Feature\n1. Code in `/home/ubuntu/TERP/server/` or `/home/ubuntu/TERP/client/`\n2. `pnpm check` (verify TypeScript)\n3. `git add . && git commit -m \"feat: description\"`\n4. `git push origin main`\n5. Rebuild & restart (see commands above)\n\n### Fix Bug\n1. Identify issue in logs: `tail -f /tmp/terp-server.log`\n2. Fix code\n3. `pnpm check`\n4. Rebuild & restart\n5. Test at dev URL\n\n### Update Schema\n1. Edit `/home/ubuntu/TERP/drizzle/schema.ts`\n2. `pnpm db:push` (generates migration)\n3. Check migration in `/home/ubuntu/TERP/drizzle/`\n4. Rebuild & restart\n\n## \ud83d\udc1b Troubleshooting\n\n| Issue | Solution |\n|-------|----------|\n| Server won't start | Check logs: `cat /tmp/terp-server.log` |\n| Port in use | Kill process: `pkill -f \"node dist\"` |\n| Database error | Restart MySQL: `sudo service mysql restart` |\n| Build fails | `rm -rf node_modules && pnpm install` |\n| TypeScript errors | `pnpm check` to see all errors |\n\n## \ud83d\udcdd Git Workflow\n\n```bash\n# Check status\ngit status\n\n# Pull latest\ngit pull origin main\n\n# Commit changes\ngit add .\ngit commit -m \"type: description\"\ngit push origin main\n\n# View history\ngit log --oneline -10\n```\n\n## \ud83d\udd10 Environment\n\nLocated at `/home/ubuntu/TERP/.env`\n\nKey variables:\n- `DATABASE_URL` - MySQL connection\n- `OAUTH_SERVER_URL` - Manus OAuth\n- `VITE_APP_*` - Frontend config\n\n## \ud83d\udcca Monitoring\n\n```bash\n# Server uptime\nps aux | grep \"node dist\" | grep -v grep\n\n# Database size\nmysql -u terp_user -pterp_production_2024 terp_production -e \"\nSELECT \n  table_schema AS 'Database',\n  ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'Size (MB)'\nFROM information_schema.tables\nWHERE table_schema = 'terp_production'\nGROUP BY table_schema;\"\n\n# Disk space\ndf -h /home/ubuntu/TERP\n```\n\n## \ud83c\udfaf Testing Checklist\n\n- [ ] Server starts without errors\n- [ ] Login page loads\n- [ ] OAuth authentication works\n- [ ] API endpoints respond\n- [ ] Database queries execute\n- [ ] No TypeScript errors\n- [ ] All features accessible\n\n## \ud83d\udcde Quick Help\n\n**Logs:** `/tmp/terp-server.log`  \n**Database:** `mysql -u terp_user -pterp_production_2024 terp_production`  \n**Code:** `/home/ubuntu/TERP/`  \n**Docs:** `/home/ubuntu/TERP/docs/`\n\n---\n\n**Status:** \u2705 RUNNING  \n**URL:** https://3001-ichtogremfzu0pbcw8rfc-2ba70fb0.manusvm.computer  \n**Last Deploy:** 2025-10-26\n\n"
  },
  "context": {
    "project": "# TERP Project Context\n\n**Version:** 2.1  \n**Last Updated:** October 27, 2025  \n**Purpose:** Complete system overview for seamless handoff between Manus sessions\n\n**\ud83d\udcd6 New to TERP?** Start with [AGENT_ONBOARDING.md](./AGENT_ONBOARDING.md) for a quick orientation guide.\n\n---\n\n## Table of Contents\n\n0. [Documentation Structure](#documentation-structure)\n1. [Project Overview](#project-overview)\n2. [System Architecture](#system-architecture)\n3. [Implemented Modules](#implemented-modules)\n4. [Database Schema](#database-schema)\n5. [API Layer (tRPC)](#api-layer-trpc)\n6. [Frontend Structure](#frontend-structure)\n7. [Mobile Optimization](#mobile-optimization)\n8. [Development Workflow](#development-workflow)\n9. [Known Issues & Limitations](#known-issues--limitations)\n10. [Next Steps & Roadmap](#next-steps--roadmap)\n\n---\n\n## Documentation Structure\n\n**TERP uses a structured documentation system for seamless agent handoffs and continuous development.**\n\n### Essential Documents (Read First)\n\n1. **[AGENT_ONBOARDING.md](./AGENT_ONBOARDING.md)** - Quick start guide for new agents\n2. **[PROJECT_CONTEXT.md](./PROJECT_CONTEXT.md)** (this file) - Overall project state\n3. **[DEVELOPMENT_PROTOCOLS.md](./DEVELOPMENT_PROTOCOLS.md)** - **THE BIBLE** - all development rules\n4. **[roadmaps/ACTIVE.md](./roadmaps/ACTIVE.md)** - Current active roadmap\n5. **[notes/user-feedback.md](./notes/user-feedback.md)** - **Check every session** - owner's feedback\n6. **[HANDOFF_CONTEXT.md](./HANDOFF_CONTEXT.md)** - Latest session handoff\n\n### Documentation Directories\n\n```\n/docs/\n\u251c\u2500\u2500 AGENT_ONBOARDING.md          # Start here for new agents\n\u251c\u2500\u2500 NEW_AGENT_PROMPT.md          # Quick prompt to give new agents\n\u251c\u2500\u2500 PROJECT_CONTEXT.md            # This file - overall project state\n\u251c\u2500\u2500 DEVELOPMENT_PROTOCOLS.md      # Development rules and standards\n\u251c\u2500\u2500 HANDOFF_CONTEXT.md            # Latest session handoff\n\u251c\u2500\u2500 CHANGELOG.md                  # Completed work history\n\u2502\n\u251c\u2500\u2500 roadmaps/                     # All implementation roadmaps\n\u2502   \u251c\u2500\u2500 README.md                 # Master index of all roadmaps\n\u2502   \u251c\u2500\u2500 ACTIVE.md                 # Current active roadmap\n\u2502   \u2514\u2500\u2500 [specific-roadmaps].md    # Individual roadmap files\n\u2502\n\u251c\u2500\u2500 notes/                        # Owner's feedback and thoughts\n\u2502   \u251c\u2500\u2500 README.md                 # How to use notes\n\u2502   \u251c\u2500\u2500 user-feedback.md          # Owner's ongoing feedback (check every session!)\n\u2502   \u251c\u2500\u2500 feature-ideas.md          # Future feature ideas\n\u2502   \u2514\u2500\u2500 known-issues.md           # Bugs and technical debt\n\u2502\n\u2514\u2500\u2500 specs/                        # Detailed specifications\n    \u2514\u2500\u2500 [various-specs].md        # Module specifications\n```\n\n### Agent Workflow\n\n**At Start of Session:**\n1. Read `notes/user-feedback.md` - check for new feedback\n2. Read `HANDOFF_CONTEXT.md` - see what last agent did\n3. Read `roadmaps/ACTIVE.md` - understand current work\n\n**During Work:**\n1. Follow `DEVELOPMENT_PROTOCOLS.md` strictly\n2. Update roadmap as you complete tasks\n3. Commit changes regularly\n\n**Before Ending:**\n1. Update roadmap with progress\n2. Update `HANDOFF_CONTEXT.md` with status\n3. Update `CHANGELOG.md` with completed work\n4. Commit and push all changes\n\n---\n\n## Project Overview\n\n**TERP** is a modern, world-class ERP (Enterprise Resource Planning) system redesign focused on simplicity, clarity, and exceptional UX/UI. The project addresses common criticisms of traditional ERP systems being confusing and complex.\n\n### Key Characteristics\n\n- **Technology Stack:**\n  - Frontend: React 19, TypeScript, Tailwind CSS 4, shadcn/ui\n  - Backend: Node.js, tRPC, Drizzle ORM\n  - Database: PostgreSQL\n  - Build Tool: Vite\n  - Package Manager: pnpm\n\n- **Design Philosophy:**\n  - Card-based layouts with ample whitespace\n  - Color-coded status indicators\n  - Persistent sidebar navigation\n  - Mobile-first responsive design\n  - Progressive disclosure of complexity\n\n- **Current Status:** Production-ready with 5 major modules implemented\n  - \u2705 Dashboard & Homepage\n  - \u2705 Inventory Management\n  - \u2705 Accounting Module (complete double-entry system)\n  - \u2705 Sales Sheet Module (dynamic pricing & sales sheet generation)\n  - \u2705 Quote/Sales Module (unified orders with brilliant COGS UX)\n\n---\n\n## System Architecture\n\n### Project Structure\n\n```\n/home/ubuntu/terp-redesign/\n\u251c\u2500\u2500 client/                      # Frontend application\n\u2502   \u2514\u2500\u2500 src/\n\u2502       \u251c\u2500\u2500 components/          # Reusable UI components\n\u2502       \u2502   \u251c\u2500\u2500 ui/             # shadcn/ui base components\n\u2502       \u2502   \u251c\u2500\u2500 layout/         # AppShell, AppHeader, AppSidebar\n\u2502       \u2502   \u251c\u2500\u2500 dashboard/      # Dashboard-specific widgets\n\u2502       \u2502   \u251c\u2500\u2500 inventory/      # Inventory-specific components\n\u2502       \u2502   \u2514\u2500\u2500 accounting/     # Accounting-specific components\n\u2502       \u251c\u2500\u2500 pages/              # Page components (routes)\n\u2502       \u2502   \u251c\u2500\u2500 Home.tsx        # Dashboard homepage\n\u2502       \u2502   \u251c\u2500\u2500 Inventory.tsx   # Inventory management\n\u2502       \u2502   \u2514\u2500\u2500 accounting/     # 10 accounting pages\n\u2502       \u251c\u2500\u2500 lib/                # Utilities and helpers\n\u2502       \u2514\u2500\u2500 App.tsx             # Main app with routing\n\u251c\u2500\u2500 server/                      # Backend application\n\u2502   \u251c\u2500\u2500 _core/                  # Core server setup\n\u2502   \u251c\u2500\u2500 routers.ts              # tRPC API endpoints\n\u2502   \u251c\u2500\u2500 inventoryDb.ts          # Inventory data access layer\n\u2502   \u251c\u2500\u2500 accountingDb.ts         # Core accounting data layer\n\u2502   \u251c\u2500\u2500 arApDb.ts               # AR/AP data access layer\n\u2502   \u2514\u2500\u2500 cashExpensesDb.ts       # Cash & expenses data layer\n\u251c\u2500\u2500 drizzle/                     # Database schema and migrations\n\u2502   \u2514\u2500\u2500 schema.ts               # Complete database schema\n\u251c\u2500\u2500 docs/                        # Documentation\n\u2502   \u251c\u2500\u2500 DEVELOPMENT_PROTOCOLS.md # The Bible\n\u2502   \u2514\u2500\u2500 PROJECT_CONTEXT.md      # This file\n\u2514\u2500\u2500 scripts/                     # Utility scripts\n    \u2514\u2500\u2500 seed-accounting.ts      # Accounting seed data\n```\n\n### Navigation Structure\n\n**Sidebar Menu:**\n1. Dashboard (/)\n2. Sales & Quotes (/quotes) - Placeholder\n3. Orders (/orders) - Placeholder\n4. Inventory (/inventory) - \u2705 Complete\n5. **Sales Sheets (/sales-sheets)** - \u2705 Complete\n6. **Pricing Rules (/pricing/rules)** - \u2705 Complete\n7. **Pricing Profiles (/pricing/profiles)** - \u2705 Complete\n8. **Accounting (/accounting/dashboard)** - \u2705 Complete\n9. Customers (/customers) - Placeholder\n10. Analytics (/analytics) - Placeholder\n11. Settings (/settings) - Placeholder\n\n---\n\n## Implemented Modules\n\n### 1. Dashboard & Homepage\n\n**Location:** `/client/src/pages/Home.tsx`\n\n**Features:**\n- 4 KPI summary cards (Revenue, Orders, Inventory Value, Low Stock)\n- Dashboard grid with 4 widgets:\n  - Recent Quotes\n  - Quick Actions\n  - Inventory Alerts\n  - Revenue Chart\n- Fully responsive (mobile-first)\n\n**Components:**\n- `KpiSummaryRow` - KPI cards with trend indicators\n- `DashboardGrid` - Responsive grid layout (1/2/3/4 columns)\n- Various widgets in `/client/src/components/dashboard/widgets/`\n\n---\n\n### 2. Inventory Management Module\n\n**Location:** `/client/src/pages/Inventory.tsx`\n\n**Features:**\n- Complete batch tracking system\n- Status management (Awaiting Intake \u2192 In Stock \u2192 Reserved \u2192 Sold \u2192 Disposed)\n- Advanced filtering and sorting\n- Dashboard statistics and charts\n- Desktop: Data table view\n- Mobile: Card-based view\n- Purchase modal for new batches\n- Batch details modal\n\n**Database Tables:**\n- `batches` - Core inventory batches\n- `products` - Product catalog\n- `brands` - Brand information\n- `vendors` - Vendor management\n- `strains` - Cannabis strain data (if applicable)\n\n**API Endpoints (tRPC):**\n- `inventory.list` - Get all batches with filters\n- `inventory.getById` - Get single batch details\n- `inventory.create` - Create new batch\n- `inventory.update` - Update batch\n- `inventory.updateStatus` - Change batch status\n- `inventory.getDashboardStats` - Get statistics\n\n**Components:**\n- `InventoryCard` - Mobile card view\n- `DashboardStats` - Statistics cards\n- `StockLevelChart` - Visual stock levels\n- `PurchaseModal` - New purchase form\n\n---\n\n### 3. Accounting Module (Complete)\n\n**Location:** `/client/src/pages/accounting/`\n\n**Overview:**\nComplete double-entry accounting system with AR/AP management, cash tracking, expense management, general ledger, and financial reporting.\n\n#### 3.1 Core Accounting\n\n**Pages:**\n1. **Accounting Dashboard** (`/accounting/dashboard`)\n   - Financial overview (Cash, AR, AP, Net Position)\n   - AR/AP aging reports\n   - Expense breakdown by category\n   - Quick actions\n   - Recent activity (invoices, bills, payments)\n\n2. **Chart of Accounts** (`/accounting/chart-of-accounts`)\n   - Hierarchical account structure\n   - Account types: Assets, Liabilities, Equity, Revenue, Expenses\n   - Create/Edit accounts\n   - Account balances\n   - Active/Inactive status\n\n3. **General Ledger** (`/accounting/general-ledger`)\n   - Journal entries table\n   - Post new journal entries\n   - Trial balance view\n   - Filter by account, fiscal period, status, date range\n   - Double-entry validation (debits = credits)\n\n4. **Fiscal Periods** (`/accounting/fiscal-periods`)\n   - Quarterly/annual periods\n   - Period status: OPEN, CLOSED, LOCKED\n   - Create new periods\n   - Close/Lock/Reopen periods\n   - Current period highlighting\n\n#### 3.2 Accounts Receivable (AR)\n\n**Pages:**\n5. **Invoices** (`/accounting/invoices`)\n   - Customer invoices list\n   - Invoice status: Draft, Sent, Viewed, Partial, Paid, Overdue, Void\n   - AR aging report (current, 30, 60, 90, 90+ days)\n   - Create/Edit invoices with line items\n   - Record payments\n   - Outstanding receivables view\n\n#### 3.3 Accounts Payable (AP)\n\n**Pages:**\n6. **Bills** (`/accounting/bills`)\n   - Vendor bills list\n   - Bill status: Draft, Pending, Partial, Paid, Overdue, Void\n   - AP aging report (current, 30, 60, 90, 90+ days)\n   - Create/Edit bills with line items\n   - Record payments\n   - Outstanding payables view\n\n7. **Payments** (`/accounting/payments`)\n   - All payment transactions (received & sent)\n   - Payment types: Received (AR), Sent (AP)\n   - Payment methods: Cash, Check, Wire, ACH, Credit Card, Debit Card\n   - Link to invoices/bills\n   - Filter by type, date range\n\n#### 3.4 Cash & Expenses\n\n**Pages:**\n8. **Bank Accounts** (`/accounting/bank-accounts`)\n   - Bank account list\n   - Account types: Checking, Savings, Credit Card, Money Market\n   - Total cash balance\n   - Active/Inactive status\n\n9. **Bank Transactions** (`/accounting/bank-transactions`)\n   - Transaction list\n   - Transaction types: Deposit, Withdrawal, Transfer, Fee\n   - Reconciliation status tracking\n   - Filter by account, type, date range\n\n10. **Expenses** (`/accounting/expenses`)\n    - Expense list with categories\n    - Reimbursement tracking (Reimbursable, Reimbursed, N/A)\n    - Expense breakdown by category\n    - Pending reimbursements view\n    - Filter by category, vendor, date range\n\n#### Database Schema (Accounting)\n\n**10 Accounting Tables:**\n\n1. **accounts** - Chart of accounts\n   - Fields: id, accountNumber, name, type, parentAccountId, description, isActive\n   - Types: ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE\n\n2. **ledgerEntries** - General ledger entries\n   - Fields: id, entryNumber, entryDate, accountId, debit, credit, description, fiscalPeriodId, referenceType, referenceId, status\n   - Status: DRAFT, POSTED, VOID\n\n3. **fiscalPeriods** - Accounting periods\n   - Fields: id, name, startDate, endDate, status, year, quarter\n   - Status: OPEN, CLOSED, LOCKED\n\n4. **invoices** - Customer invoices (AR)\n   - Fields: id, invoiceNumber, customerId, invoiceDate, dueDate, totalAmount, amountPaid, amountDue, status, terms, notes, createdBy\n   - Status: DRAFT, SENT, VIEWED, PARTIAL, PAID, OVERDUE, VOID\n\n5. **invoiceLineItems** - Invoice line items\n   - Fields: id, invoiceId, description, quantity, unitPrice, totalPrice\n\n6. **bills** - Vendor bills (AP)\n   - Fields: id, billNumber, vendorId, billDate, dueDate, totalAmount, amountPaid, amountDue, status, terms, notes, createdBy\n   - Status: DRAFT, PENDING, PARTIAL, PAID, OVERDUE, VOID\n\n7. **billLineItems** - Bill line items\n   - Fields: id, billId, description, quantity, unitPrice, totalPrice\n\n8. **payments** - Payment transactions\n   - Fields: id, paymentNumber, paymentDate, amount, paymentType, paymentMethod, customerId, vendorId, invoiceId, billId, referenceNumber, notes, createdBy\n   - Types: RECEIVED, SENT\n   - Methods: CASH, CHECK, WIRE, ACH, CREDIT_CARD, DEBIT_CARD, OTHER\n\n9. **bankAccounts** - Bank accounts\n   - Fields: id, accountName, accountNumber, bankName, accountType, currentBalance, isActive\n   - Types: CHECKING, SAVINGS, CREDIT_CARD, MONEY_MARKET\n\n10. **bankTransactions** - Bank transactions\n    - Fields: id, bankAccountId, transactionDate, amount, transactionType, description, referenceNumber, isReconciled\n    - Types: DEPOSIT, WITHDRAWAL, TRANSFER, FEE\n\n11. **expenses** - Expense tracking\n    - Fields: id, expenseNumber, expenseDate, amount, categoryId, vendorId, description, isReimbursable, isReimbursed, receiptUrl, createdBy\n\n12. **expenseCategories** - Expense categories\n    - Fields: id, name, description, isActive\n\n#### API Layer (Accounting tRPC Endpoints)\n\n**60+ Accounting Endpoints:**\n\n**Core Accounting (`accounting.*`):**\n- `accounts.list/getById/getByNumber/create/update/getBalance/getChartOfAccounts`\n- `ledger.list/getById/create/postJournalEntry/getTrialBalance`\n- `fiscalPeriods.list/getById/getCurrent/create/close/lock/reopen`\n\n**AR/AP (`accounting.*`):**\n- `invoices.list/getById/create/update/updateStatus/recordPayment/getOutstandingReceivables/getARAging/generateNumber`\n- `bills.list/getById/create/update/updateStatus/recordPayment/getOutstandingPayables/getAPAging/generateNumber`\n- `payments.list/getById/create/generateNumber/getForInvoice/getForBill`\n\n**Cash & Expenses (`accounting.*`):**\n- `bankAccounts.list/getById/create/update/updateBalance/getTotalCashBalance`\n- `bankTransactions.list/getById/create/reconcile/getUnreconciled/getBalanceAtDate`\n- `expenseCategories.list/getById/create/update`\n- `expenses.list/getById/create/update/markReimbursed/getPendingReimbursements/getBreakdownByCategory/getTotalExpenses/generateNumber`\n\n#### Data Access Layer (Accounting)\n\n**3 Database Helper Files:**\n\n1. **accountingDb.ts** (~700 lines)\n   - Core accounting functions (accounts, ledger, fiscal periods)\n   - 30+ helper functions\n   - Double-entry validation\n   - Trial balance calculation\n\n2. **arApDb.ts** (~600 lines)\n   - AR/AP functions (invoices, bills, payments)\n   - 25+ helper functions\n   - Aging calculations\n   - Payment allocation\n\n3. **cashExpensesDb.ts** (~500 lines)\n   - Cash & expense functions (bank accounts, transactions, expenses)\n   - 20+ helper functions\n   - Reconciliation tracking\n   - Expense categorization\n\n#### UI Components (Accounting)\n\n**6 Reusable Components:**\n\n1. **AmountInput** - Currency input with formatting\n2. **StatusBadge** - Color-coded status indicators\n3. **AgingBadge** - AR/AP aging bucket indicators\n4. **AccountSelector** - Dropdown for chart of accounts\n5. **FiscalPeriodSelector** - Dropdown for fiscal periods\n6. **JournalEntryForm** - Form for posting journal entries\n\n**Location:** `/client/src/components/accounting/`\n\n---\n\n### 4. Sales Sheet Module (Complete)\n\n**Location:** `/client/src/pages/` and `/client/src/components/sales/`, `/client/src/components/pricing/`\n\n**Overview:**\nComplete dynamic pricing and sales sheet generation system with rule-based pricing, client-specific configurations, and multiple export formats.\n\n#### 4.1 Pricing Engine\n\n**Backend:** `server/pricingEngine.ts`, `server/salesSheetsDb.ts`\n\n**Features:**\n- Rule-based pricing calculations\n- 4 adjustment types: % markup, % markdown, $ markup, $ markdown\n- Condition matching with AND/OR logic\n- Priority-based rule application\n- Client-specific pricing profiles\n- Retail price calculation from base prices\n\n**Database Tables:**\n1. **pricing_rules** - Pricing adjustment rules\n   - Fields: id, name, description, adjustmentType, adjustmentValue, conditions (JSON), logicType, priority, isActive\n   - Adjustment Types: PERCENT_MARKUP, PERCENT_MARKDOWN, DOLLAR_MARKUP, DOLLAR_MARKDOWN\n   - Logic Types: AND, OR\n\n2. **pricing_profiles** - Collections of pricing rules\n   - Fields: id, name, description, rules (JSON array), createdBy, createdAt, updatedAt\n   - Rules format: [{ ruleId: 1, priority: 1 }, ...]\n\n3. **sales_sheet_templates** - Saved configurations\n   - Fields: id, name, description, clientId, filters (JSON), selectedItems (JSON), columnVisibility (JSON), createdBy, createdAt, lastUsedAt\n\n4. **sales_sheet_history** - Completed sales sheets\n   - Fields: id, clientId, createdBy, templateId, items (JSON), totalValue, itemCount, notes, createdAt\n\n#### 4.2 Pricing Management Pages\n\n**Pages:**\n\n1. **Pricing Rules** (`/pricing/rules`)\n   - List all pricing rules with search\n   - Create/Edit/Delete pricing rules\n   - Rule builder UI:\n     - Adjustment type selector\n     - Adjustment value input\n     - Condition builder (key-value pairs)\n     - Logic type selector (AND/OR)\n     - Priority input\n   - Visual indicators (TrendingUp/TrendingDown icons)\n   - Badge display for adjustments\n\n2. **Pricing Profiles** (`/pricing/profiles`)\n   - List all pricing profiles\n   - Create/Edit/Delete profiles\n   - Profile builder UI:\n     - Rule selection with checkboxes\n     - Priority assignment per rule\n     - Rule count display\n   - Apply profiles to clients\n\n3. **Client Pricing Configuration** (Tab in Client Profile)\n   - Apply pricing profile dropdown\n   - Display active pricing rules for client\n   - Visual rule details (adjustment, conditions, priority, status)\n\n#### 4.3 Sales Sheet Creator\n\n**Page:** `/sales-sheets`\n\n**Features:**\n- Client selection dropdown (loads pricing automatically)\n- Two-panel layout:\n  - Left: Inventory browser (60% width)\n  - Right: Sales sheet preview (40% width)\n- Real-time inventory with client-specific pricing\n- Search and filter functionality\n- Duplicate prevention\n- Bulk and single item selection\n\n**Components:**\n\n1. **InventoryBrowser** (`/client/src/components/sales/InventoryBrowser.tsx`)\n   - Search and filter inventory\n   - Table view with columns: Checkbox, Item Name, Category, Quantity, Base Price, Retail Price, Markup %\n   - Bulk actions: Select All, Clear Selection, Add Selected\n   - Single item add button\n   - Visual feedback for selected items\n\n2. **SalesSheetPreview** (`/client/src/components/sales/SalesSheetPreview.tsx`)\n   - Live preview of selected items\n   - Drag-and-drop reordering (@dnd-kit)\n   - Inline price override functionality\n   - Price override indicators (strike-through, badges)\n   - Total item count and value calculation\n   - Export options:\n     - Copy to clipboard (plain text)\n     - Export as PDF (jsPDF)\n     - Export as PNG image (html2canvas)\n   - Save to history\n   - Clear all button\n\n3. **PricingConfigTab** (`/client/src/components/pricing/PricingConfigTab.tsx`)\n   - Client pricing configuration\n   - Apply pricing profile to client\n   - Display active pricing rules\n\n#### API Layer (Sales Sheet tRPC Endpoints)\n\n**19 Sales Sheet Endpoints:**\n\n**Pricing (`pricing.*`):**\n- `listRules` - Get all pricing rules\n- `createRule` - Create new pricing rule\n- `updateRule` - Update existing rule\n- `deleteRule` - Delete pricing rule\n- `listProfiles` - Get all pricing profiles\n- `createProfile` - Create new profile\n- `updateProfile` - Update existing profile\n- `deleteProfile` - Delete profile\n- `applyProfileToClient` - Apply profile to client\n- `getClientPricingRules` - Get client's active rules\n\n**Sales Sheets (`salesSheets.*`):**\n- `getInventory` - Get inventory with client-specific pricing\n- `save` - Save sales sheet to history\n- `getHistory` - Get client's sales sheet history\n- `getById` - Get specific sales sheet\n- `delete` - Delete sales sheet\n- `createTemplate` - Create reusable template\n- `getTemplates` - Get available templates\n- `loadTemplate` - Load template configuration\n- `deleteTemplate` - Delete template\n\n#### Dependencies Added\n\n**NPM Packages:**\n- `@dnd-kit/core@6.3.1` - Drag-and-drop core\n- `@dnd-kit/sortable@10.0.0` - Sortable drag-and-drop\n- `@dnd-kit/utilities@3.2.2` - Drag-and-drop utilities\n- `html2canvas@1.4.1` - HTML to canvas conversion\n- `jspdf@3.0.3` - PDF generation\n\n#### Known Limitations\n\n1. **Template UI:** Backend infrastructure complete, but UI for template management not yet implemented\n2. **Column Visibility:** Schema supports column configuration, but UI toggle not yet built\n3. **History View:** Save functionality works, but dedicated history viewing page not yet created\n4. **Batch Integration:** Currently uses basic batch fields; could be enhanced with product/lot relationships\n\n---\n\n### 5. Quote/Sales Module (Complete)\n\n**Location:** `/client/src/pages/OrderCreatorPage.tsx`, `/client/src/components/orders/`, `/client/src/components/cogs/`\n\n**Overview:**\nComprehensive quote and sales order management system with unified orders structure, brilliant progressive disclosure UX for COGS, and Hybrid Smart COGS calculation. Enables users to create quotes, convert them to sales, manage payment terms, track samples, and monitor credit limits with real-time margin visibility.\n\n#### 5.1 COGS Calculation Engine\n\n**Backend:** `server/cogsCalculator.ts`, `server/ordersDb.ts`\n\n**Features:**\n- **FIXED Mode:** Uses exact COGS value from batch\n- **RANGE Mode:** Calculates midpoint between min/max COGS\n- **Client Adjustments:** Percentage or fixed amount discounts per client\n- **Consignment Estimation:** Default 60% of sale price for consignment deals\n- **Real-time Margin Calculation:** Automatic margin and margin percentage updates\n\n**Database Tables:**\n1. **orders** - Unified quotes and sales structure\n   - Fields: id, orderNumber, orderType (QUOTE/SALE), clientId, subtotal, totalCogs, totalMargin, avgMarginPercent, validUntil, quoteStatus, paymentTerms, cashPayment, dueDate, notes, createdBy, createdAt, updatedAt\n   - Order Types: QUOTE, SALE\n   - Quote Status: DRAFT, SENT, ACCEPTED, REJECTED, EXPIRED\n   - Payment Terms: COD, NET_7, NET_15, NET_30, PARTIAL, CONSIGNMENT\n\n2. **orderItems** - Line items with COGS tracking\n   - Fields: id, orderId, batchId, displayName, originalName, quantity, unitPrice, isSample, overridePrice, overrideCogs, unitCogs, cogsMode, cogsSource, unitMargin, marginPercent, lineTotal, lineCogs, lineMargin\n   - COGS Modes: FIXED, RANGE\n   - COGS Sources: CALCULATED, MIDPOINT, CLIENT_ADJUSTED, MANUAL, CONSIGNMENT_ESTIMATE\n\n3. **sampleInventoryLog** - Sample tracking\n   - Fields: id, batchId, orderId, quantity, clientId, notes, createdAt\n\n4. **cogsRules** - Optional advanced rules (future enhancement)\n   - Fields: id, name, description, ruleType, conditions, adjustmentType, adjustmentValue, priority, isActive, createdAt, updatedAt\n\n**Schema Updates:**\n- Added `cogsAdjustmentType` and `cogsAdjustmentValue` to `clients` table\n- Added `sampleQty` to `batches` table\n\n#### 5.2 Order Management Pages\n\n**Pages:**\n\n1. **Order Creator** (`/orders/create`)\n   - Quote/Sale toggle with dynamic UI\n   - Client selection with credit limit integration\n   - 60/40 split layout (inventory browser + order preview)\n   - Credit limit banner for sales (5-tier alert system)\n   - Real-time totals with progressive disclosure\n   - Quote-specific fields (valid until date)\n   - Sale-specific fields (payment terms, cash payment)\n   - Notes field\n   - Create order with validation\n\n2. **COGS Settings** (`/settings/cogs`)\n   - Global COGS settings tab:\n     - Auto-calculation toggle\n     - Manual adjustment permissions\n     - COGS visibility settings\n     - Consignment defaults (60% estimation)\n     - Margin thresholds (color-coded categories)\n   - Client adjustments tab:\n     - Client search and filter\n     - COGS adjustment type (None, Percentage, Fixed Amount)\n     - Adjustment value input\n     - Quick add form\n\n3. **Client Profile - Pricing Tab** (updated)\n   - COGS configuration section added\n   - Adjustment type selector\n   - Adjustment value input\n   - Integration with existing pricing rules\n\n#### 5.3 Order Components\n\n**Key Components:**\n\n1. **OrderPreview** (`OrderPreview.tsx`)\n   - Item list with scroll area\n   - Progressive disclosure totals:\n     - Level 1: Total + Margin %\n     - Level 2: COGS breakdown (click to expand)\n   - Quote/Sale specific fields\n   - Payment terms selector\n   - Conditional cash payment input\n   - Notes textarea\n   - Create order button with validation\n\n2. **OrderItemCard** (`OrderItemCard.tsx`)\n   - Display name editing (preserves original name)\n   - Quantity and unit price controls\n   - Sample toggle\n   - 3-level COGS disclosure:\n     - Level 1: Margin % badge (default)\n     - Level 2: COGS details popover (hover/click)\n     - Level 3: Full adjustment modal (power users)\n   - Real-time line total calculation\n   - Remove item button\n\n3. **CogsAdjustmentModal** (`CogsAdjustmentModal.tsx`)\n   - Smart COGS suggestion (midpoint for RANGE mode)\n   - Custom COGS input with validation\n   - Visual slider for RANGE mode\n   - Real-time margin updates\n   - Current vs. new margin comparison\n   - Save changes button\n\n4. **CreditLimitBanner** (`CreditLimitBanner.tsx`)\n   - 5 alert states:\n     - Excellent (0-75%): Green, checkmark\n     - Good (75-90%): Yellow, warning\n     - Fair (90-100%): Orange, alert\n     - Warning (100%+): Red, alert circle\n     - Exceeded: Red, X circle\n   - Progress bar visualization\n   - Current vs. new exposure display\n   - Credit limit, current exposure, after order\n   - Warning messages for over-limit scenarios\n\n5. **CogsGlobalSettings** (`CogsGlobalSettings.tsx`)\n   - Auto-calculation toggle\n   - Manual adjustment permissions\n   - COGS visibility settings\n   - Consignment defaults input\n   - Margin thresholds configuration\n   - Color-coded badge previews\n\n6. **CogsClientSettings** (`CogsClientSettings.tsx`)\n   - Client search input\n   - Client table with adjustments\n   - Adjustment type badges\n   - Edit buttons per client\n   - Quick add form\n\n#### 5.4 Features\n\n**Quote Creation:**\n- Create quotes with customizable items from inventory\n- Edit display names (preserves original system names)\n- Mark items as samples (tracked separately)\n- Override prices per item\n- Set valid until date\n- Add notes\n- Real-time margin visibility\n\n**Sale Creation:**\n- Convert quotes to sales (one-click)\n- Create sales directly\n- Payment terms selection (6 options)\n- Conditional cash payment input for partial payments\n- Credit limit validation with visual warnings\n- Automatic invoice generation (integration ready)\n- Complete accounting integration (integration ready)\n- Sample inventory tracking\n\n**COGS Management:**\n- Brilliant progressive disclosure UX (3 levels)\n- Auto-calculation based on batch mode (FIXED/RANGE)\n- Client-specific COGS adjustments (percentage or fixed)\n- Manual COGS override per item\n- Smart suggestions (midpoint for RANGE)\n- Visual slider for RANGE adjustments\n- Real-time margin updates\n- Color-coded margin categories (5 tiers)\n\n**Credit Limit Integration:**\n- Real-time credit utilization display\n- 5-tier alert system (excellent \u2192 exceeded)\n- Current exposure tracking\n- New exposure calculation\n- Progress bar visualization\n- Warning messages for over-limit scenarios\n- Block sales over limit (configurable)\n\n#### 5.5 tRPC Endpoints\n\n**Orders Router:**\n- `orders.create` - Create quote or sale\n- `orders.getById` - Get order by ID\n- `orders.listByClient` - List orders for a client\n- `orders.listAll` - List all orders\n- `orders.convertQuoteToSale` - Convert quote to sale\n\n#### 5.6 UX/UI Design Principles\n\n**Progressive Disclosure:**\n- **Level 1 (Novice):** Simple margin percentage badge\n- **Level 2 (Intermediate):** COGS breakdown on hover/click\n- **Level 3 (Power User):** Full adjustment modal with controls\n\n**Smart Defaults:**\n- System auto-calculates COGS using rules\n- FIXED mode \u2192 instant lock\n- RANGE mode \u2192 midpoint\n- Consignment \u2192 60% estimation\n- User rarely needs to intervene\n\n**Empowerment Without Confusion:**\n- Novice users never see \"COGS\", just profit\n- Power users: 2 clicks to adjust anything\n- All users: Visual feedback, clear state\n\n#### 5.7 Known Limitations (By Design)\n\n1. **COGS Rules Engine:** Basic implementation (client-level adjustments only)\n   - Advanced rules (volume tiers, product-specific) not implemented\n   - Can be added in future phases if needed\n\n2. **Deferred COGS:** Not implemented\n   - Uses estimation (60% of sale price) for consignment\n   - Full deferred COGS workflow can be added later\n\n3. **Export Functionality:** Not implemented in this phase\n   - Planned for future enhancement (PDF, Excel, image)\n   - Can use browser print or third-party tools\n\n4. **Order History:** Basic tracking only\n   - Full order management (edit, cancel, refund) not implemented\n   - Can be added in future phases\n\n5. **Integration Dependencies:**\n   - Credit Engine: Assumes integration with existing credit module\n   - Accounting Module: Sale creation should trigger accounting entries (not tested)\n   - Inventory Module: Sample tracking should update inventory (not tested)\n\n---\n\n## Mobile Optimization\n\n### Responsive Design Patterns\n\nAll pages follow consistent mobile-first responsive patterns:\n\n**Breakpoints:**\n- Mobile: < 640px (`grid-cols-1`)\n- Tablet: 640px - 1024px (`sm:` and `md:` prefixes)\n- Desktop: > 1024px (`lg:` prefix)\n\n**Common Patterns:**\n\n1. **Headers:**\n   ```tsx\n   <h1 className=\"text-2xl md:text-3xl font-bold tracking-tight\">\n   ```\n\n2. **Summary Card Grids:**\n   ```tsx\n   <div className=\"grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-4\">\n   ```\n\n3. **Header Layouts:**\n   ```tsx\n   <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n   ```\n\n4. **Button Groups:**\n   ```tsx\n   <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n   ```\n\n5. **Tables:**\n   - Desktop: Full data table (`hidden md:block`)\n   - Mobile: Card-based view (`md:hidden`)\n\n### Mobile-Optimized Pages\n\n**All pages are fully mobile-optimized:**\n- \u2705 Dashboard (Home)\n- \u2705 Inventory\n- \u2705 All 10 Accounting pages\n\n**Key Features:**\n- Single-column layouts on mobile\n- Stacked buttons and filters\n- Responsive typography\n- Touch-friendly tap targets (44px minimum)\n- Horizontal scrolling for wide tables\n- Collapsible sections for complex forms\n\n---\n\n## Development Workflow\n\n### \ud83c\udfaf CRITICAL: Master Development Prompt\n\n**Before starting ANY work on TERP, you MUST read:**\n\n**`docs/MASTER_DEVELOPMENT_PROMPT.md`** \u2190 START HERE ALWAYS\n\nThis comprehensive master prompt ensures you follow ALL protocols, standards, and best practices. It includes:\n- Required reading list\n- Mandatory protocols (non-negotiable)\n- System integration & change management\n- Production-ready code standards\n- Breaking change protocol\n- **Context documentation update requirements (MANDATORY after each phase)**\n- Parallel development protocol (enhanced)\n- TERP design system standards\n- Quality assurance checklist\n- Standard development workflow\n\n### Starting a New Session\n\n1. **Navigate to project:**\n   ```bash\n   cd /home/ubuntu/terp-redesign\n   ```\n\n2. **Start dev server:**\n   ```bash\n   pnpm dev\n   ```\n   Or use `webdev_restart_server` tool\n\n3. **Check status:**\n   ```bash\n   webdev_check_status\n   ```\n\n### Making Changes\n\n1. **Read DEVELOPMENT_PROTOCOLS.md first**\n2. **Perform Impact Analysis**\n3. **Make changes in batch (all related files)**\n4. **Validate with `webdev_check_status`**\n5. **Test in browser**\n6. **Save checkpoint with `webdev_save_checkpoint`**\n\n### File Watcher Issues\n\nIf you encounter \"EMFILE: too many open files\" errors:\n\n```bash\n# Increase inotify watchers\nsudo sysctl fs.inotify.max_user_watches=524288\n\n# Increase max open files\nsudo sysctl fs.file-max=2097152\nulimit -n 65536\n\n# Kill stale processes if needed\nps aux | grep tsx\nkill -9 <process_id>\n```\n\n### TypeScript Validation\n\nAlways ensure zero TypeScript errors:\n```bash\npnpm tsc --noEmit\n```\n\n---\n\n## Database Schema\n\n### Complete Table List\n\n**Inventory Module (5 tables):**\n- batches\n- products\n- brands\n- vendors\n- strains\n\n**Accounting Module (12 tables):**\n- accounts\n- ledgerEntries\n- fiscalPeriods\n- invoices\n- invoiceLineItems\n- bills\n- billLineItems\n- payments\n- bankAccounts\n- bankTransactions\n- expenses\n- expenseCategories\n\n**Total: 17 production tables**\n\n### Schema Location\n\n`/home/ubuntu/terp-redesign/drizzle/schema.ts`\n\n### Running Migrations\n\n```bash\n# Generate migrations\npnpm db:generate\n\n# Run migrations\npnpm db:migrate\n\n# Push schema changes (generate + migrate)\npnpm db:push\n```\n\n### Database Access\n\nUse `webdev_execute_sql` tool for direct SQL queries:\n```sql\nSELECT COUNT(*) FROM accounts;\nSELECT * FROM invoices WHERE status = 'OVERDUE';\n```\n\n---\n\n## API Layer (tRPC)\n\n### Router Structure\n\n**Location:** `/home/ubuntu/terp-redesign/server/routers.ts`\n\n**Namespaces:**\n- `inventory.*` - Inventory management endpoints\n- `accounting.accounts.*` - Chart of accounts\n- `accounting.ledger.*` - General ledger\n- `accounting.fiscalPeriods.*` - Fiscal periods\n- `accounting.invoices.*` - Invoices (AR)\n- `accounting.bills.*` - Bills (AP)\n- `accounting.payments.*` - Payments\n- `accounting.bankAccounts.*` - Bank accounts\n- `accounting.bankTransactions.*` - Bank transactions\n- `accounting.expenseCategories.*` - Expense categories\n- `accounting.expenses.*` - Expenses\n\n### Adding New Endpoints\n\n1. **Create data access function** in appropriate `*Db.ts` file\n2. **Add tRPC procedure** in `routers.ts`\n3. **Define Zod schema** for input validation\n4. **Use `protectedProcedure`** for authenticated endpoints\n5. **Test with `webdev_check_status`**\n\nExample:\n```typescript\nmyNewEndpoint: protectedProcedure\n  .input(z.object({ id: z.number() }))\n  .query(async ({ input }) => {\n    return await getMyData(input.id);\n  }),\n```\n\n---\n\n## Frontend Structure\n\n### Component Organization\n\n**Base UI Components** (`/client/src/components/ui/`)\n- shadcn/ui components (button, card, table, input, etc.)\n- DO NOT modify these directly\n- Use composition to extend functionality\n\n**Layout Components** (`/client/src/components/layout/`)\n- `AppShell` - Main layout wrapper\n- `AppHeader` - Top navigation bar\n- `AppSidebar` - Left sidebar navigation\n\n**Module-Specific Components**\n- `/client/src/components/dashboard/` - Dashboard widgets\n- `/client/src/components/inventory/` - Inventory components\n- `/client/src/components/accounting/` - Accounting components\n\n### Adding New Pages\n\n1. **Create page component** in `/client/src/pages/`\n2. **Add route** in `/client/src/App.tsx`:\n   ```tsx\n   <Route path={\"/my-page\"} component={MyPage} />\n   ```\n3. **Add navigation link** in `/client/src/components/layout/AppSidebar.tsx`:\n   ```tsx\n   { name: 'My Page', href: '/my-page', icon: MyIcon }\n   ```\n4. **Test navigation** and ensure no 404 errors\n\n### Styling Guidelines\n\n**Always use Tailwind CSS classes:**\n- Spacing: `gap-4`, `p-6`, `mt-2`\n- Layout: `flex`, `grid`, `grid-cols-1 md:grid-cols-2`\n- Typography: `text-2xl`, `font-bold`, `text-muted-foreground`\n- Colors: Use semantic colors from design system\n\n**Responsive patterns:**\n- Mobile-first: Start with mobile classes, add breakpoints\n- Use `sm:`, `md:`, `lg:` prefixes consistently\n- Test at 320px, 768px, 1024px, 1440px widths\n\n---\n\n## Known Issues & Limitations\n\n### Current Limitations\n\n1. **Placeholder Pages:**\n   - Sales & Quotes (/quotes)\n   - Orders (/orders)\n   - Customers (/customers)\n   - Analytics (/analytics)\n   - Settings (/settings)\n\n2. **Mock Data:**\n   - Dashboard KPIs use mock data\n   - Some widgets have placeholder data\n   - Accounting module has empty tables (seed data script available)\n\n3. **Authentication:**\n   - Basic auth structure in place\n   - Full authentication flow not implemented\n   - Protected procedures defined but not enforced\n\n4. **File Uploads:**\n   - Receipt upload for expenses not implemented\n   - S3 storage configured but not used in UI\n\n### Known Technical Issues\n\n1. **File Watcher Exhaustion:**\n   - Large project can exhaust inotify watchers\n   - Solution: Increase system limits (see Development Workflow)\n\n2. **Dev Server Stale Processes:**\n   - tsx watch processes can become stale\n   - Solution: Kill process and restart with `webdev_restart_server`\n\n### No Critical Bugs\n\n\u2705 Zero TypeScript errors\n\u2705 Zero runtime errors\n\u2705 All implemented features work correctly\n\u2705 Mobile optimization complete\n\u2705 Production-ready code throughout\n\n---\n\n## Next Steps & Roadmap\n\n### Immediate Priorities\n\n1. **Complete Placeholder Pages:**\n   - Sales & Quotes module\n   - Orders management\n   - Customer management\n   - Analytics dashboard\n   - Settings page\n\n2. **Accounting Enhancements:**\n   - Add seed data for demo purposes\n   - Implement invoice/bill PDF generation\n   - Add receipt upload for expenses\n   - Create financial reports (P&L, Balance Sheet, Cash Flow)\n\n3. **Authentication & Authorization:**\n   - Implement full auth flow\n   - Add role-based access control\n   - User management interface\n\n4. **Advanced Features:**\n   - Real-time notifications\n   - Export to Excel/CSV\n   - Advanced search across modules\n   - Audit trail for all transactions\n\n### Future Modules\n\n- **Manufacturing:** Production orders, BOMs, work orders\n- **HR & Payroll:** Employee management, time tracking, payroll\n- **CRM:** Lead management, opportunity tracking, sales pipeline\n- **Purchasing:** Purchase orders, vendor management, receiving\n- **Reporting:** Custom report builder, scheduled reports\n\n---\n\n## Quick Reference Commands\n\n### Development\n```bash\ncd /home/ubuntu/terp-redesign\npnpm dev                    # Start dev server\npnpm tsc --noEmit          # Check TypeScript\npnpm db:push               # Push schema changes\n```\n\n### System Maintenance\n```bash\n# Increase file watchers\nsudo sysctl fs.inotify.max_user_watches=524288\n\n# Check running processes\nps aux | grep tsx\n\n# Kill stale process\nkill -9 <process_id>\n```\n\n### Tools\n```bash\nwebdev_check_status         # Check project health\nwebdev_restart_server       # Restart dev server\nwebdev_save_checkpoint      # Save checkpoint\nwebdev_execute_sql          # Run SQL queries\n```\n\n---\n\n## Future Architecture Compatibility\n\n**CRITICAL:** TERP is evolving toward a secure home office architecture (8-week roadmap). All development MUST be forward-compatible.\n\n### Quick Rules (Full details in MANUS_AGENT_CONTEXT.md)\n\n**1. Use Abstractions:**\n```typescript\n// \u2705 GOOD\nimport { authProvider } from '../_core/authProvider';\nimport { dataProvider } from '../_core/dataProvider';\n\n// \u274c BAD - Direct calls (will need refactoring)\nimport { getAuth } from '@clerk/express';\nimport { getDb } from '../db';\n```\n\n**2. Design for Offline:**\n```typescript\n// \u2705 Return full objects + metadata\nreturn {\n  order,  // Full object\n  affectedRecords: { orders: [order.id] },\n  timestamp: new Date(),\n};\n\n// \u274c Just return ID (requires another query)\nreturn { orderId };\n```\n\n**3. Keep Code Organized:**\n- Routers: THIN (< 50 lines per procedure)\n- Business logic: In `*Db.ts` files\n- Use abstractions: `authProvider`, `dataProvider`\n\n**4. Schema Evolution:**\n- Only additive changes (no renames/deletions)\n- New fields must be nullable or have defaults\n\n### Pre-Push Checklist\n- [ ] Uses `authProvider`/`dataProvider` interfaces\n- [ ] Returns full objects (not IDs)\n- [ ] Schema changes are additive\n- [ ] Router < 50 lines per procedure\n\n**See:** `docs/MANUS_AGENT_CONTEXT.md` for quick reference, `docs/PRODUCT_DEVELOPMENT_STRATEGY.md` for full strategy.\n\n---\n\n## Session Handoff Checklist\n\nWhen handing off to a new Manus session, ensure:\n\n- \u2705 Read this document (PROJECT_CONTEXT.md)\n- \u2705 Read MANUS_AGENT_CONTEXT.md (quick compatibility guide)\n- \u2705 Read DEVELOPMENT_PROTOCOLS.md (The Bible)\n- \u2705 Run `webdev_check_status` to verify system health\n- \u2705 Check latest checkpoint version\n- \u2705 Review any open issues or incomplete work\n- \u2705 Understand current module structure\n- \u2705 Know where to find database schema\n- \u2705 Understand tRPC API organization\n- \u2705 Know mobile optimization patterns\n- \u2705 Follow production-ready code standards\n- \u2705 **Follow future architecture compatibility rules**\n\n**Zero guesswork needed. Everything is documented.**\n\n---\n\n**Last Updated:** October 25, 2025  \n**Current Version:** 023542e6  \n**Status:** Production-ready with 3 complete modules (Dashboard, Inventory, Accounting)  \n**Next Session:** Ready to implement any module or enhancement with full context\n\n"
  },
  "standards": {
    "design": "# TERP ERP System Design System Document\n\n---\n\n## 1. Executive Summary\n\nThe TERP redesign aims to address longstanding ERP UX challenges: overwhelming complexity, inconsistent design, and poor user adoption. Research underscores that **user-centric simplicity, progressive disclosure, and role-based personalization** are critical to transforming TERP into an intuitive, efficient platform that empowers diverse users across complex workflows. Leveraging modern UI frameworks and design systems\u2014especially those optimizing for data density and enterprise-scale complexity\u2014will enable TERP to compete with leading ERP solutions.\n\nWe recommend adopting a **custom design system built on headless component libraries (Radix UI) combined with Tailwind CSS and Shadcn/ui\u2019s curated components**, layered with strict governance to ensure maintainability and consistency. This approach balances flexibility with scalability, allowing TERP to deliver highly customized, accessible, and responsive interfaces. Navigation should be structured with **multi-level, role-based hierarchies**, and components (tables, forms, dashboards, search) must prioritize **power-user efficiency and accessibility**. The implementation will proceed in phased iterations focusing on foundational architecture, core UI components, accessibility compliance, and finally, mobile-first responsiveness and onboarding enhancements.\n\nBy adhering to these principles and leveraging the Next.js + TypeScript + Tailwind CSS stack, TERP can achieve measurable improvements in user satisfaction, task efficiency, and adoption rates, positioning itself as a world-class ERP system.\n\n---\n\n## 2. Core Design Principles\n\n| Principle                         | Description                                                                                                  | Actionable Recommendation                                              |\n|----------------------------------|--------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| **User-Centric Simplicity**      | Prioritize essential features and progressively disclose complexity to reduce cognitive overload.            | Implement multi-level disclosure; show only relevant data per role.    |\n| **Role-Based Personalization**   | Tailor navigation, dashboards, and workflows to user roles and tasks to minimize clutter and improve focus.  | Enable customizable dashboards and context-specific menus.             |\n| **Consistency & Governance**     | Maintain uniform UI patterns, terminology, and interactions across all modules to reduce learning curves.    | Establish a strict design system governance with documented standards. |\n| **Data Density & Clarity**       | Optimize layouts for high information density without sacrificing readability or usability.                   | Use compact, well-structured tables and dashboards with clear hierarchy.|\n| **Accessibility & Inclusivity**  | Design for all users, including those with disabilities, meeting WCAG 2.1 AA standards as a minimum.           | Use semantic HTML, keyboard operability, high contrast, and ARIA roles.|\n| **Performance & Responsiveness** | Ensure fast load times and seamless operation across devices, supporting mobile-first workflows.              | Utilize SSR, client/server caching, and responsive design best practices.|\n| **Progressive Onboarding**       | Replace upfront training with contextual, in-app guidance and staged workflows for better learnability.       | Embed tooltips, guided tours, and smart tips triggered contextually.   |\n\n---\n\n## 3. Design System Selection\n\n| Option               | Pros                                                                                                  | Cons                                                                                           | Recommendation                          |\n|----------------------|-------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------|---------------------------------------|\n| **Material Design**   | Strong visual hierarchy, scalable, widely adopted, extensive tooling support                          | Requires heavy customization for ERP complexity and legacy integration; less tailored for enterprise data density | Not recommended as primary base       |\n| **Fluent UI**         | Enterprise-grade, excellent legacy-modern bridging, cross-platform, AI integration-friendly          | More Windows/Microsoft ecosystem-centric; may require customization for TERP branding          | Viable alternative; consider for cross-platform modules |\n| **Custom (Radix UI + Tailwind + Shadcn/ui)** | Highly flexible, accessible primitives, Tailwind enables rapid styling, Shadcn/ui speeds initial dev | Shadcn/ui needs governance to avoid maintenance issues; requires initial investment to build full system | **Recommended for TERP** due to flexibility, accessibility, and alignment with Next.js/TypeScript/Tailwind stack |\n\n### Justification:\n\n- TERP demands **highly customized, data-dense, and accessible UI components** that off-the-shelf systems cannot fully satisfy.\n- Headless libraries like Radix UI provide **accessible, unstyled primitives** that can be tailored precisely to TERP\u2019s unique workflows.\n- Tailwind CSS enables **rapid, consistent styling** aligned with TERP branding.\n- Shadcn/ui offers curated components accelerating development but must be integrated under a **robust governance framework** to avoid design drift.\n- The chosen stack complements Next.js and TypeScript for **performance, maintainability, and scalability**.\n\n---\n\n## 4. Navigation Architecture\n\n### Hierarchy Levels & Patterns\n\n| Level                | Description                                                | Pattern Recommendation                        | Notes                                                               |\n|----------------------|------------------------------------------------------------|-----------------------------------------------|---------------------------------------------------------------------|\n| **Level 1: Product Bundle Switch** | Top-level switch between major TERP modules (e.g., Finance, HR, Inventory) | Dropdown or global header menu                 | Allows users to switch major domains without cognitive overload     |\n| **Level 2: Primary Navigation**    | Core functional areas within each module (e.g., Invoices, Reports, Settings) | Horizontal tab bar or sidebar menu             | Use sidebar drawer for desktop; bottom nav on mobile                |\n| **Level 3: Secondary Navigation**  | Contextual navigation related to selected primary area (e.g., Invoice types, filters) | Collapsible sidebar or contextual tabs        | Provides task-focused access without overwhelming the main nav      |\n| **Level 4: Contextual Controls**   | Page-specific actions, filters, and sub-navigation               | Inline controls, breadcrumbs, toolbars          | Maintain breadcrumbs for orientation and quick backtracking         |\n\n### Navigation Patterns:\n\n- **Drawer Navigation (Sidebar):** Primary pattern on desktop for deep hierarchies \u2014 collapsible, persistent, with clear icons + labels.\n- **Tab-Based Navigation:** For limited primary sections (3\u20137), horizontal tabs provide quick switching.\n- **Bottom Navigation:** On mobile, provide quick access to 3-5 most frequent actions.\n- **Breadcrumb Trails:** Always visible on data-heavy screens to maintain spatial orientation.\n- **Search Bar:** Persistent, prominent global search with autocomplete and faceted filters.\n\n### Role-Based Customization\n\n- Dashboards and navigation menus should be **personalizable** by role and user preference.\n- Hide irrelevant modules or features based on role permissions.\n- Allow users to save **favorite views** or shortcuts for efficiency.\n\n---\n\n## 5. Component Guidelines\n\n### 5.1 Data Tables & Grids\n\n| Feature                  | Design Requirement                                                                                      |\n|--------------------------|--------------------------------------------------------------------------------------------------------|\n| Sorting                  | Multi-level sorting with clear visual indicators (arrows, numeric priority)                            |\n| Filtering                | Hierarchical filters: visible primary filters + expandable advanced filters with AND/OR logic          |\n| Pagination               | Traditional pagination with \u201cRows per page\u201d selector; avoid infinite scroll for auditability            |\n| Bulk Actions             | Checkbox selection with sticky contextual toolbar; support multi-page selection with confirmation       |\n| Customization            | Allow show/hide, reorder, resize columns; save user preferences                                        |\n| Density Control          | Options for Compact (40-44px), Standard (48-56px) row heights                                         |\n| Responsiveness           | Collapse columns or switch to list view on narrow screens                                            |\n| Accessibility            | Semantic markup (`<table>`, `<thead>`, `<th>`, scope), keyboard operable, ARIA roles                    |\n| Performance              | Virtual scrolling or server-side pagination for >1000 rows                                           |\n\n### 5.2 Forms\n\n| Feature                  | Design Requirement                                                                                      |\n|--------------------------|--------------------------------------------------------------------------------------------------------|\n| Validation               | Late inline validation (on blur) with precise, polite, actionable error messages                       |\n| Error Handling           | Errors shown adjacent to fields with color + icon; instant error removal upon correction                |\n| Multi-Step Forms         | Logical chunking, clear progress tracker persistent on screen, fluid navigation between steps          |\n| Layout                   | Single-column per step for vertical scanning                                                          |\n| Personalization          | Display only fields relevant to user role or task                                                     |\n| Accessibility            | Use ARIA attributes to link errors; keyboard operability; focus management                             |\n\n### 5.3 Dashboards & Data Visualization\n\n| Feature                  | Design Requirement                                                                                      |\n|--------------------------|--------------------------------------------------------------------------------------------------------|\n| Role-Specific Views      | Dashboards tailored per user role; support user customization                                         |\n| KPI Selection            | Limit displayed KPIs to most actionable (3-7 per dashboard)                                           |\n| Visual Clarity           | Minimal borders/gridlines, consistent color coding, tooltips for context                              |\n| Interactivity            | Drill-down capabilities; filter by date, location, department                                        |\n| Real-Time Updates        | Use WebSockets or polling; show last refresh timestamp                                               |\n| Responsiveness           | Adapt layout for mobile/tablet without loss of functionality                                         |\n| Accessibility            | Charts with accessible descriptions, keyboard navigable controls                                     |\n\n### 5.4 Search & Filtering\n\n| Feature                  | Design Requirement                                                                                      |\n|--------------------------|--------------------------------------------------------------------------------------------------------|\n| Autocomplete             | Limit suggestions (max 10 desktop, 4-8 mobile), highlight predictive text                              |\n| Faceted Search           | Dynamic faceting updating counts in real-time; parallel multi-selection                              |\n| Advanced Filters         | UI supporting AND/OR logic, nested groups, range/wildcard syntax                                     |\n| Saved Views              | Allow users to save and recall complex filter sets                                                  |\n| Clear All Filters        | Prominently placed \u201cReset\u201d option                                                                    |\n\n---\n\n## 6. Accessibility Standards\n\n| Requirement                   | Implementation Guideline                                                                                  |\n|-------------------------------|----------------------------------------------------------------------------------------------------------|\n| Compliance Level              | WCAG 2.1 Level AA minimum; aim for WCAG 2.2                                                               |\n| Semantic Markup              | Use HTML5 semantic elements (`<nav>`, `<main>`, `<section>`, `<button>`, `<table>`)                        |\n| ARIA Roles & Attributes      | Apply `aria-label`, `aria-describedby`, `aria-live`, `role` for custom components and dynamic content     |\n| Keyboard Operability         | All interactive elements must be reachable & usable via keyboard; logical tab order                       |\n| Color Contrast               | Minimum 4.5:1 contrast ratio for text and interactive elements                                            |\n| Focus Indicators             | Highly visible, consistent focus outlines (e.g., thick, high-contrast borders)                            |\n| Iconography                  | Provide descriptive text for icons; avoid icon-only controls without labels                               |\n| Error Announcements          | Errors linked programmatically to inputs; use ARIA live regions for dynamic messages                      |\n| Data Tables Accessibility   | Proper `<thead>`, `<tbody>`, `<th>` with `scope`; keyboard navigation within grids                        |\n| Testing & Auditing           | Integrate automated (axe, Lighthouse) and manual testing with screen readers (NVDA, JAWS, VoiceOver)      |\n| Design System Overlay       | For legacy components, use accessible design system overlays (e.g., SAP Fiori model) to modernize UI      |\n\n---\n\n## 7. Mobile Strategy\n\n| Aspect                      | Recommendation                                                                                              |\n|-----------------------------|-------------------------------------------------------------------------------------------------------------|\n| Responsive Design           | Use fluid layouts with Tailwind utilities and CSS media queries; collapse complex tables to list/detail views |\n| Contextual Prioritization   | Show only essential data and controls per screen; use patterns like **Rotating Table** and **List-Detail**     |\n| Navigation                 | Bottom navigation with 3-5 core actions; hamburger menu/drawer for deep navigation                            |\n| Performance                | Prioritize fast load through SSR, optimized assets, and caching; implicit saving to avoid data loss          |\n| Native Capabilities        | Consider native mobile apps for device-specific features like camera scanning and offline functionality      |\n| Form Design               | Simplify data entry with single-column layouts, large touch targets, and minimize typing                      |\n| Feedback & Validation      | Provide immediate, clear visual and haptic feedback for inputs and errors                                    |\n| Accessibility             | Maintain keyboard focus, screen reader support, and color contrast on small devices                          |\n\n---\n\n## 8. Implementation Roadmap\n\n| Phase                    | Focus Areas                                            | Objectives & Deliverables                                           | Timeline Estimate  |\n|--------------------------|--------------------------------------------------------|-------------------------------------------------------------------|--------------------|\n| **Phase 1: Foundations** | Design system setup, architecture, navigation          | Establish governance, build base Radix UI + Tailwind component lib; define IA and multi-level nav | 2-3 months         |\n| **Phase 2: Core Components** | Data tables, forms, search/filter UI                  | Develop accessible, high-performance data grids, form validation, advanced search components       | 3-4 months         |\n| **Phase 3: Dashboards & Visualizations** | KPI dashboards, real-time data integration          | Implement customizable, role-based dashboards with drill-down and live updates                       | 2-3 months         |\n| **Phase 4: Accessibility & Testing** | Full WCAG 2.1 AA compliance audit and remediation    | Accessibility testing, refactoring, keyboard navigation, screen reader compatibility                  | 1-2 months         |\n| **Phase 5: Mobile & Responsive** | Responsive layouts, mobile-specific patterns           | Adapt tables/forms/dashboards for mobile; implement Rotating Table and List-Detail patterns          | 2 months           |\n| **Phase 6: Onboarding & Progressive Disclosure** | Contextual help, guided tours, progressive disclosure | Embed in-app onboarding, tooltips, staged workflows, lazy feature loading                            | 1-2 months         |\n| **Phase 7: Iteration & Feedback** | Pilot testing, user feedback integration                 | Collect metrics, refine UX/UI, fix bugs, optimize performance                                            | Continuous         |\n\n---\n\n## 9. Success Metrics\n\n| Metric                        | Measurement Approach                                              | Target / Goal                                 |\n|-------------------------------|------------------------------------------------------------------|-----------------------------------------------|\n| **User Adoption Rate**        | Percentage of active users post-launch vs baseline               | >80% within 3 months of rollout               |\n| **Task Completion Time**      | Time taken to complete common workflows (e.g., invoice processing) | Reduction of 30-50% compared to legacy UI     |\n| **Error Rate in Forms**       | Number of validation/form submission errors per session          | Decrease by 40%                               |\n| **User Satisfaction (CSAT)** | Surveys, NPS scores post-usage                                   | Score > 80% positive                          |\n| **Accessibility Compliance** | Automated audits + manual testing results                        | 100% WCAG 2.1 AA compliance                   |\n| **System Performance**       | Page load times, API latency, responsiveness                      | Initial load < 2s; 95th percentile interactions < 500ms |\n| **Support Tickets**          | Number and type of UX-related support requests                    | Reduction by 25% within 6 months               |\n| **Feature Usage Analytics** | Usage stats for advanced features and customization               | Increase in adoption of secondary/advanced features by 20% |\n\n---\n\n# Appendix: Key References & Resources\n\n- [WCAG 2.1 Guidelines](https://www.w3.org/TR/WCAG21/)\n- [Radix UI](https://www.radix-ui.com/)\n- [Tailwind CSS](https://tailwindcss.com/)\n- [Shadcn/ui Documentation](https://ui.shadcn.com/)\n- [Next.js Docs](https://nextjs.org/docs)\n- [Nielsen Norman Group: Progressive Disclosure](https://www.nngroup.com/articles/progressive-disclosure/)\n- [SAP Fiori Design Guidelines](https://experience.sap.com/fiori-design/)\n- [Microsoft Dynamics 365 Advanced Filtering](https://learn.microsoft.com/en-us/dynamics365/fin-ops-core/fin-ops/get-started/advanced-filtering-query-options)\n- [TanStack Table](https://tanstack.com/table/v8)\n\n---\n\n*This document is intended as a strategic and tactical guide for TERP UX/UI redesign using modern enterprise design best practices, supporting the Next.js + TypeScript + Tailwind CSS + Radix UI + Shadcn/ui technology stack.*"
  },
  "patterns": {
    "tech_stack": {
      "frontend": "Next.js 14, React, TypeScript, Tailwind CSS, shadcn/ui",
      "backend": "Next.js API routes, Prisma ORM",
      "database": "PostgreSQL",
      "auth": "Clerk",
      "deployment": "Vercel"
    },
    "file_structure": {
      "components": "app/components/",
      "pages": "app/",
      "api": "app/api/",
      "lib": "lib/",
      "types": "types/",
      "prisma": "prisma/"
    },
    "naming_conventions": {
      "components": "PascalCase",
      "files": "kebab-case or PascalCase for components",
      "functions": "camelCase",
      "constants": "UPPER_SNAKE_CASE"
    }
  }
}